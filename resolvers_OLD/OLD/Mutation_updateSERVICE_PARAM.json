{
    "resolver": {
        "typeName": "Mutation",
        "fieldName": "updateSERVICE_PARAM",
        "dataSourceName": "hazel_mapping_dev",
        "resolverArn": "arn:aws:appsync:us-east-2:794611117044:apis/rxlu3umb3bdhjgswtlwqbsd44m/types/Mutation/resolvers/updateSERVICE_PARAM",
        "kind": "UNIT",
        "maxBatchSize": 0,
        "runtime": {
            "name": "APPSYNC_JS",
            "runtimeVersion": "1.0.0"
        },
        "code": "import { util } from '@aws-appsync/utils';\nimport { update, select, createMySQLStatement, toJsonObject } from '@aws-appsync/utils/rds';\n\n/**\n * Updates an item in the SERVICE_PARAM table, if an item with the given key exists.\n * @param {import('@aws-appsync/utils').Context} ctx the context\n * @returns {*} the request\n */\nexport function request(ctx) {\n    const { input: { SERVICE_PARAM_ID, ...values }, condition = {} } = ctx.args;\n    const where = {\n        ...condition,\n        SERVICE_PARAM_ID: {\n            eq: SERVICE_PARAM_ID,\n        },\n    };\n    const updateStatement = update({\n        table: 'SERVICE_PARAM',\n        values,\n        where,\n    });\n    const selectStatement = select({\n        table: 'SERVICE_PARAM',\n        columns: '*',\n        where,\n        limit: 1,\n    });\n    return createMySQLStatement(updateStatement, selectStatement)\n}\n\n/**\n * Returns the result or throws an error if the operation failed.\n * @param {import('@aws-appsync/utils').Context} ctx the context\n * @returns {*} the result\n */\nexport function response(ctx) {\n    const { error, result } = ctx;\n    if (error) {\n        return util.appendError(\n            error.message,\n            error.type,\n            result\n        )\n    }\n    return toJsonObject(result)[1][0]\n}\n"
    }
}
