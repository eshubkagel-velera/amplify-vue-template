{
    "resolver": {
        "typeName": "Mutation",
        "fieldName": "createSERVICE_PROVIDER",
        "dataSourceName": "hazel_mapping_dev",
        "resolverArn": "arn:aws:appsync:us-east-2:794611117044:apis/rxlu3umb3bdhjgswtlwqbsd44m/types/Mutation/resolvers/createSERVICE_PROVIDER",
        "kind": "UNIT",
        "maxBatchSize": 0,
        "runtime": {
            "name": "APPSYNC_JS",
            "runtimeVersion": "1.0.0"
        },
        "code": "import { util } from '@aws-appsync/utils';\nimport { insert, select, createMySQLStatement, toJsonObject } from '@aws-appsync/utils/rds';\n\n/**\n * Puts an item into the SERVICE_PROVIDER table using the supplied input.\n * @param {import('@aws-appsync/utils').Context} ctx the context\n * @returns {*} the request\n */\nexport function request(ctx) {\n    const { input } = ctx.args;\n    const insertStatement = insert({\n        table: 'SERVICE_PROVIDER',\n        values: input,\n    });\n    const selectStatement = `SELECT SERVICE_PROVIDER_ID, SERVICE_PROVIDER_NAME, CREATED_BY_USER_ID, CREATED_DATE, CHANGED_BY_USER_ID, CHANGED_DATE FROM hazel_mapping_dev.SERVICE_PROVIDER WHERE SERVICE_PROVIDER_ID IN (SELECT MAX(SERVICE_PROVIDER_ID) FROM hazel_mapping_dev.SERVICE_PROVIDER)`;\n    return createMySQLStatement(insertStatement, selectStatement)\n}\n\n/**\n * Returns the result or throws an error if the operation failed.\n * @param {import('@aws-appsync/utils').Context} ctx the context\n * @returns {*} the result\n */\nexport function response(ctx) {\n    const { error, result } = ctx;\n    if (error) {\n        return util.appendError(\n            error.message,\n            error.type,\n            result\n        )\n    }\n    return toJsonObject(result)[1][0]\n}\n"
    }
}
