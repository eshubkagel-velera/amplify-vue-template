{
  "service": {
    "service": "vue-appsync-api",
    "serviceObject": {
      "name": "vue-appsync-api"
    },
    "provider": {
      "name": "aws",
      "runtime": "nodejs18.x",
      "region": "us-east-2",
      "stage": "live",
      "deploymentBucket": "hazel-mapping-serverless-deployment-bucket",
      "versionFunctions": true,
      "deploymentBucketObject": {
        "skipPolicySetup": true,
        "name": "hazel-mapping-serverless-deployment-bucket"
      },
      "compiledCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "EmailDomainValidationFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "FunctionName": "email-domain-validation-live",
              "Runtime": "nodejs18.x",
              "Handler": "index.handler",
              "Code": {
                "ZipFile": "exports.handler = async (event) => {\n  const email = event.request.userAttributes.email;\n  \n  // Input validation\n  if (!email || typeof email !== 'string') {\n    throw new Error('Invalid email format');\n  }\n  \n  var emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n  if (!emailRegex.test(email)) {\n    throw new Error('Invalid email format');\n  }\n  \n  if (!email.endsWith('@velera.com')) {\n    throw new Error('Only @velera.com email addresses are allowed');\n  }\n  \n  console.log('Email validation passed for domain: ' + email.split('@')[1]);\n  return event;\n};\n"
              },
              "Role": {
                "Fn::GetAtt": [
                  "LambdaExecutionRole",
                  "Arn"
                ]
              }
            }
          },
          "PostConfirmationFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "FunctionName": "post-confirmation-live",
              "Runtime": "nodejs18.x",
              "Handler": "index.handler",
              "Code": {
                "ZipFile": "const { CognitoIdentityProviderClient, AdminAddUserToGroupCommand, ListUsersInGroupCommand } = require('@aws-sdk/client-cognito-identity-provider');\nconst { SESClient, SendEmailCommand } = require('@aws-sdk/client-ses');\n\nconst cognito = new CognitoIdentityProviderClient({ region: 'us-east-2' });\nconst ses = new SESClient({ region: 'us-east-2' });\n\nexports.handler = async (event) => {\n  const { userPoolId, userName } = event;\n  const userAttributes = event.request.userAttributes;\n  const region = process.env.AWS_REGION;\n  \n  // Input validation\n  if (!userAttributes.email || !userAttributes.email.includes('@')) {\n    console.error('Invalid email format');\n    return event;\n  }\n  \n  try {\n    // Add user to ReadOnly group by default\n    await cognito.send(new AdminAddUserToGroupCommand({\n      GroupName: 'readonly',\n      UserPoolId: userPoolId,\n      Username: userName\n    }));\n    \n    console.log('User ' + userName + ' added to readonly group');\n    \n    // Send notification to admins about new user\n    const adminUsers = await cognito.send(new ListUsersInGroupCommand({\n      GroupName: 'admin',\n      UserPoolId: userPoolId\n    }));\n    \n    const adminEmails = adminUsers.Users.map(user => \n      user.Attributes.find(attr => attr.Name === 'email')?.Value\n    ).filter(email => email && email.includes('@'));\n    \n    console.log('Admin emails found:', JSON.stringify(adminEmails));\n    \n    if (adminEmails.length > 0) {\n      const emailParams = {\n        Source: 'eshubkagel@velera.com',\n        Destination: { ToAddresses: adminEmails },\n        Message: {\n          Subject: { Data: 'New User Registration: ' + userAttributes.email.split('@')[0] + '@*** (' + (userAttributes.name || 'Unknown') + ')' },\n          Body: {\n            Text: {\n              Data: 'New user has registered and been added to readonly group.\\n\\nUser Details:\\n- Email: ' + userAttributes.email + '\\n- Username: ' + userName + '\\n- ' + (userAttributes.name || 'Requested Access: Unknown') + '\\n\\nTo add user to requested group:\\nhttps://us-east-2.console.aws.amazon.com/cognito/v2/idp/user-pools/' + userPoolId + '/user-management/groups/details/' + (userAttributes.name ? userAttributes.name.replace('Requested: ', '').toLowerCase() : 'developer') + '/add-user?region=' + region\n            }\n          }\n        }\n      };\n      \n      console.log('Sending email TO:', JSON.stringify(adminEmails));\n      const result = await ses.send(new SendEmailCommand(emailParams));\n      console.log('SES Response:', JSON.stringify(result));\n      console.log('Notification sent to ' + adminEmails.length + ' admins');\n    }\n  } catch (error) {\n    console.error('Error in post-confirmation:', error.message);\n    console.error('Full error:', JSON.stringify(error));\n  }\n  \n  return event;\n};\n"
              },
              "Role": {
                "Fn::GetAtt": [
                  "PostConfirmationLambdaRole",
                  "Arn"
                ]
              }
            }
          },
          "PostConfirmationLambdaRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": "lambda.amazonaws.com"
                    },
                    "Action": "sts:AssumeRole"
                  }
                ]
              },
              "ManagedPolicyArns": [
                "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
              ],
              "Policies": [
                {
                  "PolicyName": "CognitoGroupManagement",
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "cognito-idp:AdminAddUserToGroup",
                          "cognito-idp:ListUsersInGroup"
                        ],
                        "Resource": "arn:aws:cognito-idp:us-east-2:794611117044:userpool/us-east-2_iAtP0Uzh5"
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "ses:SendEmail"
                        ],
                        "Resource": [
                          "arn:aws:ses:us-east-2:*:identity/eshubkagel@velera.com"
                        ]
                      }
                    ]
                  }
                }
              ]
            }
          },
          "PostConfirmationLambdaPermission": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Ref": "PostConfirmationFunction"
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "cognito-idp.amazonaws.com",
              "SourceArn": "arn:aws:cognito-idp:us-east-2:794611117044:userpool/us-east-2_iAtP0Uzh5"
            }
          },
          "LambdaExecutionRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": "lambda.amazonaws.com"
                    },
                    "Action": "sts:AssumeRole"
                  }
                ]
              },
              "ManagedPolicyArns": [
                "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
              ]
            }
          },
          "CognitoLambdaPermission": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Ref": "EmailDomainValidationFunction"
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "cognito-idp.amazonaws.com",
              "SourceArn": "arn:aws:cognito-idp:us-east-2:794611117044:userpool/us-east-2_iAtP0Uzh5"
            }
          },
          "AppSyncLoggingRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": "appsync.amazonaws.com"
                    },
                    "Action": "sts:AssumeRole"
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": "CloudWatchLogsAccess",
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogGroup",
                          "logs:CreateLogStream",
                          "logs:PutLogEvents"
                        ],
                        "Resource": "*"
                      }
                    ]
                  }
                }
              ]
            }
          },
          "RDSServiceRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": "appsync.amazonaws.com"
                    },
                    "Action": "sts:AssumeRole"
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": "RDSDataAccess",
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "rds-data:*"
                        ],
                        "Resource": [
                          "arn:aws:rds:us-east-2:*:cluster:hazel-mapping-live"
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "secretsmanager:GetSecretValue",
                          "kms:Decrypt",
                          "kms:DescribeKey"
                        ],
                        "Resource": [
                          "arn:aws:secretsmanager:us-east-2:794611117044:secret:rds!cluster-5975818b-f15c-4381-b0ba-1f281f97610d-GlpEdy",
                          "arn:aws:kms:us-east-2:*:key/*"
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogGroup",
                          "logs:CreateLogStream",
                          "logs:PutLogEvents"
                        ],
                        "Resource": [
                          "arn:aws:logs:us-east-2:*:log-group:/aws/appsync/*"
                        ]
                      }
                    ]
                  }
                }
              ]
            }
          },
          "GraphQlApi": {
            "Type": "AWS::AppSync::GraphQLApi",
            "Properties": {
              "Name": "vue-appsync-api-live",
              "AuthenticationType": "AMAZON_COGNITO_USER_POOLS",
              "AdditionalAuthenticationProviders": [
                {
                  "AuthenticationType": "API_KEY"
                }
              ],
              "UserPoolConfig": {
                "AwsRegion": "us-east-2",
                "UserPoolId": "us-east-2_iAtP0Uzh5",
                "DefaultAction": "ALLOW"
              },
              "XrayEnabled": false
            }
          },
          "GraphQlApiKeyDefault": {
            "Type": "AWS::AppSync::ApiKey",
            "Properties": {
              "ApiId": {
                "Fn::GetAtt": [
                  "GraphQlApi",
                  "ApiId"
                ]
              },
              "Description": "Auto-generated api key",
              "Expires": 1790791200
            }
          },
          "GraphQlSchema": {
            "Type": "AWS::AppSync::GraphQLSchema",
            "Properties": {
              "Definition": "schema {\n  query: Query\n  mutation: Mutation\n  subscription: Subscription\n}\n\ntype CONFIG_PARAM {\n  CHANGED_DATE: String\n  CONFIG_NAME: String!\n  CONFIG_PARAM_ID: Int!\n  CONFIG_VALUE: String!\n  CREATED_DATE: String\n  DESCRIPTION: String\n}\n\ntype LOAN_APP {\n  CHANGED_DATE: String\n  CREATED_DATE: String!\n  EXEC_ID: String\n  LOAN_APP_ID: Int!\n  ORIGIN_LOAN_APP_ID: String!\n  ORIGIN_PRODUCT_ID: Int!\n  PROCESS_FLAG: String!\n}\n\ntype NEW_MEMBER_TOKEN {\n  CARD_NBR: String\n  CHANGED_DATE: String\n  CREATED_DATE: String!\n  DOB: String\n  EMAIL_ADDRESS_TEXT: String\n  FIRST_NAME: String\n  HOME_PHONE_NBR: String\n  LAST_NAME: String\n  LOAN_APP_ID: Int!\n  MEMBER_NBR: String\n  MOBILE_PHONE_NBR: String\n  NEW_MEMBER_TOKEN_ID: Int!\n  PERSON_NBR: String\n  TAX_ID: String\n  TOKEN_USED_FLAG: String!\n  TOKEN_VALUE: String\n  ZIP_CODE: String\n}\n\ntype ORIGIN_PRODUCT {\n  CHANGED_BY_USER_ID: Int\n  CHANGED_DATE: String\n  CREATED_BY_USER_ID: Int!\n  CREATED_DATE: String!\n  ORIGIN_PRODUCT_ID: Int!\n  PARTNER_CODE: String\n  PRODUCT_DESC: String!\n  PRODUCT_ID: String!\n  PSCU_CLIENT_ID: Int!\n  VENDOR_NAME: String!\n}\n\ninput CreateCONFIG_PARAMInput {\n  CHANGED_DATE: String\n  CONFIG_NAME: String!\n  CONFIG_PARAM_ID: Int!\n  CONFIG_VALUE: String!\n  CREATED_DATE: String\n  DESCRIPTION: String\n}\n\ninput CreateLOAN_APPInput {\n  CHANGED_DATE: String\n  CREATED_DATE: String!\n  EXEC_ID: String\n  LOAN_APP_ID: Int!\n  ORIGIN_LOAN_APP_ID: String!\n  ORIGIN_PRODUCT_ID: Int!\n  PROCESS_FLAG: String!\n}\n\ninput CreateNEW_MEMBER_TOKENInput {\n  CARD_NBR: String\n  CHANGED_DATE: String\n  CREATED_DATE: String!\n  DOB: String\n  EMAIL_ADDRESS_TEXT: String\n  FIRST_NAME: String\n  HOME_PHONE_NBR: String\n  LAST_NAME: String\n  LOAN_APP_ID: Int!\n  MEMBER_NBR: String\n  MOBILE_PHONE_NBR: String\n  NEW_MEMBER_TOKEN_ID: Int!\n  PERSON_NBR: String\n  TAX_ID: String\n  TOKEN_USED_FLAG: String!\n  TOKEN_VALUE: String\n  ZIP_CODE: String\n}\n\ninput CreateORIGIN_PRODUCTInput {\n  CHANGED_BY_USER_ID: Int\n  CHANGED_DATE: String\n  CREATED_BY_USER_ID: Int!\n  CREATED_DATE: String!\n  ORIGIN_PRODUCT_ID: Int\n  PARTNER_CODE: String\n  PRODUCT_DESC: String!\n  PRODUCT_ID: String!\n  PSCU_CLIENT_ID: Int!\n  VENDOR_NAME: String!\n}\n\ninput CreateREDIRECT_URLInput {\n  ORIGIN_PRODUCT_ID: Int!\n  URL_TYPE_CODE: String!\n  URL: String!\n  RESPONSE_TEXT: String\n  CREATED_BY_USER_ID: Int!\n  CREATED_DATE: String!\n}\n\ninput UpdateREDIRECT_URLInput {\n  REDIRECT_URL_ID: Int!\n  ORIGIN_PRODUCT_ID: Int!\n  URL_TYPE_CODE: String!\n  URL: String!\n  RESPONSE_TEXT: String\n  CHANGED_BY_USER_ID: Int\n  CHANGED_DATE: String\n}\n\ninput DeleteREDIRECT_URLInput {\n  REDIRECT_URL_ID: Int!\n}\n\ninput CreateSERVICE_PROVIDERInput {\n  SERVICE_PROVIDER_NAME: String!\n  CREATED_BY_USER_ID: Int!\n  CREATED_DATE: String!\n}\n\ninput UpdateSERVICE_PROVIDERInput {\n  SERVICE_PROVIDER_ID: Int!\n  SERVICE_PROVIDER_NAME: String!\n  CHANGED_BY_USER_ID: Int\n  CHANGED_DATE: String\n}\n\ninput DeleteSERVICE_PROVIDERInput {\n  SERVICE_PROVIDER_ID: Int!\n}\n\ninput CreateSERVICEInput {\n  SERVICE_PROVIDER_ID: Int!\n  URI: String!\n  SECRET_NAME: String\n  REQUEST_TYPE: String\n  CREATED_BY_USER_ID: Int!\n  CREATED_DATE: String!\n}\n\ninput UpdateSERVICEInput {\n  SERVICE_ID: Int!\n  SERVICE_PROVIDER_ID: Int!\n  URI: String!\n  SECRET_NAME: String\n  REQUEST_TYPE: String\n  CHANGED_BY_USER_ID: Int\n  CHANGED_DATE: String\n}\n\ninput DeleteSERVICEInput {\n  SERVICE_ID: Int!\n}\n\ninput CreateSERVICE_PARAMInput {\n  SERVICE_ID: Int!\n  PARAM_NAME: String!\n  CREATED_BY_USER_ID: Int!\n  CREATED_DATE: String!\n}\n\ninput UpdateSERVICE_PARAMInput {\n  SERVICE_PARAM_ID: Int!\n  SERVICE_ID: Int!\n  PARAM_NAME: String!\n  CHANGED_BY_USER_ID: Int\n  CHANGED_DATE: String\n}\n\ninput DeleteSERVICE_PARAMInput {\n  SERVICE_PARAM_ID: Int!\n}\n\ninput CreateSERVICE_PARAM_MAPPINGInput {\n  ORIGIN_PRODUCT_ID: Int!\n  SYSTEM_NBR: String\n  PRIN_NBR: String\n  AGENT_NBR: String\n  SOURCE_SERVICE_PARAM_ID: Int!\n  TARGET_SERVICE_PARAM_ID: Int!\n  PLASTIC_TYPE_ID: Int\n  COMMENT_TEXT: String\n  CREATED_BY_USER_ID: Int!\n  CREATED_DATE: String!\n}\n\ninput UpdateSERVICE_PARAM_MAPPINGInput {\n  SERVICE_PARAM_MAPPING_ID: Int!\n  ORIGIN_PRODUCT_ID: Int!\n  SYSTEM_NBR: String\n  PRIN_NBR: String\n  AGENT_NBR: String\n  SOURCE_SERVICE_PARAM_ID: Int!\n  TARGET_SERVICE_PARAM_ID: Int!\n  PLASTIC_TYPE_ID: Int\n  COMMENT_TEXT: String\n  CHANGED_BY_USER_ID: Int\n  CHANGED_DATE: String\n}\n\ninput DeleteSERVICE_PARAM_MAPPINGInput {\n  SERVICE_PARAM_MAPPING_ID: Int!\n}\n\ninput CreateSERVICE_EXPR_MAPPINGInput {\n  SERVICE_PARAM_MAPPING_ID: Int!\n  SOURCE_EXPR: String!\n  TARGET_EXPR: String!\n  COMMENT_TEXT: String\n  CREATED_BY_USER_ID: Int!\n  CREATED_DATE: String!\n}\n\ninput UpdateSERVICE_EXPR_MAPPINGInput {\n  SERVICE_EXPR_MAPPING_ID: Int!\n  SERVICE_PARAM_MAPPING_ID: Int!\n  SOURCE_EXPR: String!\n  TARGET_EXPR: String!\n  COMMENT_TEXT: String\n  CHANGED_BY_USER_ID: Int\n  CHANGED_DATE: String\n}\n\ninput DeleteSERVICE_EXPR_MAPPINGInput {\n  SERVICE_EXPR_MAPPING_ID: Int!\n}\n\ninput CreateSTEP_TYPEInput {\n  STEP_TYPE_NAME: String!\n  STEP_TYPE_DESC: String\n  RESOURCE_NAME: String\n  CREATED_BY_USER_ID: Int!\n  CREATED_DATE: String!\n}\n\ninput UpdateSTEP_TYPEInput {\n  STEP_TYPE_ID: Int!\n  STEP_TYPE_NAME: String!\n  STEP_TYPE_DESC: String\n  RESOURCE_NAME: String\n  CHANGED_BY_USER_ID: Int\n  CHANGED_DATE: String\n}\n\ninput DeleteSTEP_TYPEInput {\n  STEP_TYPE_ID: Int!\n}\n\ninput CreateSTEP_SERVICE_MAPPINGInput {\n  STEP_TYPE_ID: Int!\n  SERVICE_ID: Int!\n  SEQUENCE_NBR: Int!\n}\n\ninput UpdateSTEP_SERVICE_MAPPINGInput {\n  STEP_SERVICE_MAPPING_ID: Int!\n  STEP_TYPE_ID: Int!\n  SERVICE_ID: Int!\n  SEQUENCE_NBR: Int!\n}\n\ninput DeleteSTEP_SERVICE_MAPPINGInput {\n  STEP_SERVICE_MAPPING_ID: Int!\n}\n\ninput UpdateORIGIN_PRODUCTInput {\n  ORIGIN_PRODUCT_ID: Int!\n  VENDOR_NAME: String!\n  PRODUCT_ID: String!\n  PRODUCT_DESC: String!\n  PSCU_CLIENT_ID: Int!\n  PARTNER_CODE: String\n  CREATED_BY_USER_ID: Int\n  CREATED_DATE: String\n  CHANGED_BY_USER_ID: Int\n  CHANGED_DATE: String\n}\n\ninput DeleteORIGIN_PRODUCTInput {\n  ORIGIN_PRODUCT_ID: Int!\n}\n\ntype ORIGIN_PRODUCTConnection {\n  items: [ORIGIN_PRODUCT]\n  nextToken: String\n}\n\ntype SERVICE_PROVIDERConnection {\n  items: [SERVICE_PROVIDER]\n  nextToken: String\n}\n\ntype SERVICEConnection {\n  items: [SERVICE]\n  nextToken: String\n}\n\ntype SERVICE_PARAMConnection {\n  items: [SERVICE_PARAM]\n  nextToken: String\n}\n\ntype SERVICE_PARAM_MAPPINGConnection {\n  items: [SERVICE_PARAM_MAPPING]\n  nextToken: String\n}\n\ntype SERVICE_EXPR_MAPPINGConnection {\n  items: [SERVICE_EXPR_MAPPING]\n  nextToken: String\n}\n\ntype STEP_TYPEConnection {\n  items: [STEP_TYPE]\n  nextToken: String\n}\n\ntype STEP_SERVICE_MAPPINGConnection {\n  items: [STEP_SERVICE_MAPPING]\n  nextToken: String\n}\n\ntype REDIRECT_URLConnection {\n  items: [REDIRECT_URL]\n  nextToken: String\n}\n\ntype Query {\n  \n    listCONFIG_PARAMS: [CONFIG_PARAM] @aws_auth(cognito_groups: [\"readonly\", \"developer\", \"deployment\", \"admin\"])\n  listLOAN_APPS: [LOAN_APP] @aws_auth(cognito_groups: [\"readonly\", \"developer\", \"deployment\", \"admin\"])\n  listNEW_MEMBER_TOKENS: [NEW_MEMBER_TOKEN] @aws_auth(cognito_groups: [\"readonly\", \"developer\", \"deployment\", \"admin\"])\n  listORIGIN_PRODUCTS: ORIGIN_PRODUCTConnection @aws_auth(cognito_groups: [\"readonly\", \"developer\", \"deployment\", \"admin\"])\n  listSERVICE_PROVIDERS: SERVICE_PROVIDERConnection @aws_auth(cognito_groups: [\"readonly\", \"developer\", \"deployment\", \"admin\"])\n  listSERVICES: SERVICEConnection @aws_auth(cognito_groups: [\"readonly\", \"developer\", \"deployment\", \"admin\"])\n  listSERVICE_PARAMS: SERVICE_PARAMConnection @aws_auth(cognito_groups: [\"readonly\", \"developer\", \"deployment\", \"admin\"])\n  listSERVICE_PARAM_MAPPINGS: SERVICE_PARAM_MAPPINGConnection @aws_auth(cognito_groups: [\"readonly\", \"developer\", \"deployment\", \"admin\"])\n  listSERVICE_EXPR_MAPPINGS: SERVICE_EXPR_MAPPINGConnection @aws_auth(cognito_groups: [\"readonly\", \"developer\", \"deployment\", \"admin\"])\n  listSTEP_TYPES: STEP_TYPEConnection @aws_auth(cognito_groups: [\"readonly\", \"developer\", \"deployment\", \"admin\"])\n  listSTEP_SERVICE_MAPPINGS: STEP_SERVICE_MAPPINGConnection @aws_auth(cognito_groups: [\"readonly\", \"developer\", \"deployment\", \"admin\"])\n  listREDIRECT_URLS: REDIRECT_URLConnection @aws_auth(cognito_groups: [\"readonly\", \"developer\", \"deployment\", \"admin\"])\n}\n\ntype Mutation {\n  \n    createCONFIG_PARAM(input: CreateCONFIG_PARAMInput!): CONFIG_PARAM @aws_auth(cognito_groups: [\"developer\", \"deployment\", \"admin\"])\n  createLOAN_APP(input: CreateLOAN_APPInput!): LOAN_APP @aws_auth(cognito_groups: [\"developer\", \"deployment\", \"admin\"])\n  createNEW_MEMBER_TOKEN(input: CreateNEW_MEMBER_TOKENInput!): NEW_MEMBER_TOKEN @aws_auth(cognito_groups: [\"developer\", \"deployment\", \"admin\"])\n  createORIGIN_PRODUCT(input: CreateORIGIN_PRODUCTInput!): ORIGIN_PRODUCT @aws_auth(cognito_groups: [\"developer\", \"deployment\", \"admin\"])\n  createSERVICE_PROVIDER(input: CreateSERVICE_PROVIDERInput!): SERVICE_PROVIDER @aws_auth(cognito_groups: [\"developer\", \"deployment\", \"admin\"])\n  createSERVICE(input: CreateSERVICEInput!): SERVICE @aws_auth(cognito_groups: [\"developer\", \"deployment\", \"admin\"])\n  createSERVICE_PARAM(input: CreateSERVICE_PARAMInput!): SERVICE_PARAM @aws_auth(cognito_groups: [\"developer\", \"deployment\", \"admin\"])\n  createSERVICE_PARAM_MAPPING(input: CreateSERVICE_PARAM_MAPPINGInput!): SERVICE_PARAM_MAPPING @aws_auth(cognito_groups: [\"developer\", \"deployment\", \"admin\"])\n  createSERVICE_EXPR_MAPPING(input: CreateSERVICE_EXPR_MAPPINGInput!): SERVICE_EXPR_MAPPING @aws_auth(cognito_groups: [\"developer\", \"deployment\", \"admin\"])\n  createSTEP_TYPE(input: CreateSTEP_TYPEInput!): STEP_TYPE @aws_auth(cognito_groups: [\"developer\", \"deployment\", \"admin\"])\n  createSTEP_SERVICE_MAPPING(input: CreateSTEP_SERVICE_MAPPINGInput!): STEP_SERVICE_MAPPING @aws_auth(cognito_groups: [\"developer\", \"deployment\", \"admin\"])\n  createREDIRECT_URL(input: CreateREDIRECT_URLInput!): REDIRECT_URL @aws_auth(cognito_groups: [\"developer\", \"deployment\", \"admin\"])\n  \n    updateORIGIN_PRODUCT(input: UpdateORIGIN_PRODUCTInput!): ORIGIN_PRODUCT @aws_auth(cognito_groups: [\"developer\", \"deployment\", \"admin\"])\n  updateSERVICE_PROVIDER(input: UpdateSERVICE_PROVIDERInput!): SERVICE_PROVIDER @aws_auth(cognito_groups: [\"developer\", \"deployment\", \"admin\"])\n  updateSERVICE(input: UpdateSERVICEInput!): SERVICE @aws_auth(cognito_groups: [\"developer\", \"deployment\", \"admin\"])\n  updateSERVICE_PARAM(input: UpdateSERVICE_PARAMInput!): SERVICE_PARAM @aws_auth(cognito_groups: [\"developer\", \"deployment\", \"admin\"])\n  updateSERVICE_PARAM_MAPPING(input: UpdateSERVICE_PARAM_MAPPINGInput!): SERVICE_PARAM_MAPPING @aws_auth(cognito_groups: [\"developer\", \"deployment\", \"admin\"])\n  updateSERVICE_EXPR_MAPPING(input: UpdateSERVICE_EXPR_MAPPINGInput!): SERVICE_EXPR_MAPPING @aws_auth(cognito_groups: [\"developer\", \"deployment\", \"admin\"])\n  updateSTEP_TYPE(input: UpdateSTEP_TYPEInput!): STEP_TYPE @aws_auth(cognito_groups: [\"developer\", \"deployment\", \"admin\"])\n  updateSTEP_SERVICE_MAPPING(input: UpdateSTEP_SERVICE_MAPPINGInput!): STEP_SERVICE_MAPPING @aws_auth(cognito_groups: [\"developer\", \"deployment\", \"admin\"])\n  updateREDIRECT_URL(input: UpdateREDIRECT_URLInput!): REDIRECT_URL @aws_auth(cognito_groups: [\"developer\", \"deployment\", \"admin\"])\n  \n    deleteORIGIN_PRODUCT(input: DeleteORIGIN_PRODUCTInput!): ORIGIN_PRODUCT @aws_auth(cognito_groups: [\"developer\", \"deployment\", \"admin\"])\n  deleteSERVICE_PROVIDER(input: DeleteSERVICE_PROVIDERInput!): SERVICE_PROVIDER @aws_auth(cognito_groups: [\"developer\", \"deployment\", \"admin\"])\n  deleteSERVICE(input: DeleteSERVICEInput!): SERVICE @aws_auth(cognito_groups: [\"developer\", \"deployment\", \"admin\"])\n  deleteSERVICE_PARAM(input: DeleteSERVICE_PARAMInput!): SERVICE_PARAM @aws_auth(cognito_groups: [\"developer\", \"deployment\", \"admin\"])\n  deleteSERVICE_PARAM_MAPPING(input: DeleteSERVICE_PARAM_MAPPINGInput!): SERVICE_PARAM_MAPPING @aws_auth(cognito_groups: [\"developer\", \"deployment\", \"admin\"])\n  deleteSERVICE_EXPR_MAPPING(input: DeleteSERVICE_EXPR_MAPPINGInput!): SERVICE_EXPR_MAPPING @aws_auth(cognito_groups: [\"developer\", \"deployment\", \"admin\"])\n  deleteSTEP_TYPE(input: DeleteSTEP_TYPEInput!): STEP_TYPE @aws_auth(cognito_groups: [\"developer\", \"deployment\", \"admin\"])\n  deleteSTEP_SERVICE_MAPPING(input: DeleteSTEP_SERVICE_MAPPINGInput!): STEP_SERVICE_MAPPING @aws_auth(cognito_groups: [\"developer\", \"deployment\", \"admin\"])\n  deleteREDIRECT_URL(input: DeleteREDIRECT_URLInput!): REDIRECT_URL @aws_auth(cognito_groups: [\"developer\", \"deployment\", \"admin\"])\n}\n\ntype SERVICE_PROVIDER {\n  SERVICE_PROVIDER_ID: Int!\n  SERVICE_PROVIDER_NAME: String!\n  CREATED_BY_USER_ID: Int!\n  CREATED_DATE: String!\n  CHANGED_BY_USER_ID: Int\n  CHANGED_DATE: String\n}\n\ntype SERVICE {\n  SERVICE_ID: Int!\n  SERVICE_PROVIDER_ID: Int!\n  URI: String!\n  SECRET_NAME: String\n  REQUEST_TYPE: String\n  CREATED_BY_USER_ID: Int!\n  CREATED_DATE: String!\n  CHANGED_BY_USER_ID: Int\n  CHANGED_DATE: String\n}\n\ntype SERVICE_PARAM {\n  SERVICE_PARAM_ID: Int!\n  SERVICE_ID: Int!\n  PARAM_NAME: String!\n  CREATED_BY_USER_ID: Int!\n  CREATED_DATE: String!\n  CHANGED_BY_USER_ID: Int\n  CHANGED_DATE: String\n}\n\ntype SERVICE_PARAM_MAPPING {\n  SERVICE_PARAM_MAPPING_ID: Int!\n  ORIGIN_PRODUCT_ID: Int!\n  SYSTEM_NBR: String\n  PRIN_NBR: String\n  AGENT_NBR: String\n  SOURCE_SERVICE_PARAM_ID: Int!\n  TARGET_SERVICE_PARAM_ID: Int!\n  PLASTIC_TYPE_ID: Int\n  COMMENT_TEXT: String\n  CREATED_BY_USER_ID: Int!\n  CREATED_DATE: String!\n  CHANGED_BY_USER_ID: Int\n  CHANGED_DATE: String\n}\n\ntype SERVICE_EXPR_MAPPING {\n  SERVICE_EXPR_MAPPING_ID: Int!\n  SERVICE_PARAM_MAPPING_ID: Int!\n  SOURCE_EXPR: String!\n  TARGET_EXPR: String!\n  COMMENT_TEXT: String\n  CREATED_BY_USER_ID: Int!\n  CREATED_DATE: String!\n  CHANGED_BY_USER_ID: Int\n  CHANGED_DATE: String\n}\n\ntype STEP_TYPE {\n  STEP_TYPE_ID: Int!\n  STEP_TYPE_NAME: String!\n  STEP_TYPE_DESC: String\n  RESOURCE_NAME: String\n  CREATED_BY_USER_ID: Int!\n  CREATED_DATE: String!\n  CHANGED_BY_USER_ID: Int\n  CHANGED_DATE: String\n}\n\ntype STEP_SERVICE_MAPPING {\n  STEP_SERVICE_MAPPING_ID: Int!\n  STEP_TYPE_ID: Int!\n  SERVICE_ID: Int!\n  SEQUENCE_NBR: Int!\n}\n\ntype REDIRECT_URL {\n  REDIRECT_URL_ID: Int!\n  ORIGIN_PRODUCT_ID: Int!\n  URL_TYPE_CODE: String!\n  URL: String!\n  RESPONSE_TEXT: String\n  CREATED_BY_USER_ID: Int!\n  CREATED_DATE: String!\n  CHANGED_BY_USER_ID: Int\n  CHANGED_DATE: String\n}\n\ntype Subscription {\n  onCreateCONFIG_PARAM: CONFIG_PARAM\n  onCreateLOAN_APP: LOAN_APP\n  onCreateNEW_MEMBER_TOKEN: NEW_MEMBER_TOKEN\n  onCreateORIGIN_PRODUCT: ORIGIN_PRODUCT\n}",
              "ApiId": {
                "Fn::GetAtt": [
                  "GraphQlApi",
                  "ApiId"
                ]
              }
            }
          },
          "GraphQlDsStageDataSource": {
            "Type": "AWS::AppSync::DataSource",
            "Properties": {
              "ApiId": {
                "Fn::GetAtt": [
                  "GraphQlApi",
                  "ApiId"
                ]
              },
              "Name": "StageDataSource",
              "Type": "RELATIONAL_DATABASE",
              "ServiceRoleArn": {
                "Fn::GetAtt": [
                  "RDSServiceRole",
                  "Arn"
                ]
              },
              "RelationalDatabaseConfig": {
                "RdsHttpEndpointConfig": {
                  "AwsRegion": "us-east-2",
                  "DbClusterIdentifier": {
                    "Fn::Join": [
                      ":",
                      [
                        "arn",
                        "aws",
                        "rds",
                        "us-east-2",
                        {
                          "Ref": "AWS::AccountId"
                        },
                        "cluster",
                        "hazel-mapping-live"
                      ]
                    ]
                  },
                  "DatabaseName": "hazel_mapping_live",
                  "AwsSecretStoreArn": "arn:aws:secretsmanager:us-east-2:794611117044:secret:rds!cluster-5975818b-f15c-4381-b0ba-1f281f97610d-GlpEdy"
                },
                "RelationalDatabaseSourceType": "RDS_HTTP_ENDPOINT"
              }
            }
          },
          "GraphQlResolverQuerylistCONFIGPARAMS": {
            "Type": "AWS::AppSync::Resolver",
            "DependsOn": "GraphQlSchema",
            "Properties": {
              "ApiId": {
                "Fn::GetAtt": [
                  "GraphQlApi",
                  "ApiId"
                ]
              },
              "TypeName": "Query",
              "FieldName": "listCONFIG_PARAMS",
              "RequestMappingTemplate": "{\r\n  \"version\": \"2018-05-29\",\r\n  \"statements\": [\r\n    \"SELECT * FROM CONFIG_PARAM\"\r\n  ]\r\n}",
              "ResponseMappingTemplate": "## Raise a GraphQL field error in case of a datasource invocation error\r\n#if($ctx.error)\r\n    $utils.error($ctx.error.message, $ctx.error.type)\r\n#end\r\n\r\n$utils.toJson($utils.rds.toJsonObject($ctx.result)[0])",
              "Kind": "UNIT",
              "DataSourceName": {
                "Fn::GetAtt": [
                  "GraphQlDsStageDataSource",
                  "Name"
                ]
              }
            }
          },
          "GraphQlResolverQuerylistLOANAPPS": {
            "Type": "AWS::AppSync::Resolver",
            "DependsOn": "GraphQlSchema",
            "Properties": {
              "ApiId": {
                "Fn::GetAtt": [
                  "GraphQlApi",
                  "ApiId"
                ]
              },
              "TypeName": "Query",
              "FieldName": "listLOAN_APPS",
              "RequestMappingTemplate": "{\r\n  \"version\": \"2018-05-29\",\r\n  \"statements\": [\r\n    \"SELECT * FROM LOAN_APP\"\r\n  ]\r\n}",
              "ResponseMappingTemplate": "## Raise a GraphQL field error in case of a datasource invocation error\r\n#if($ctx.error)\r\n    $utils.error($ctx.error.message, $ctx.error.type)\r\n#end\r\n\r\n$utils.toJson($utils.rds.toJsonObject($ctx.result)[0])",
              "Kind": "UNIT",
              "DataSourceName": {
                "Fn::GetAtt": [
                  "GraphQlDsStageDataSource",
                  "Name"
                ]
              }
            }
          },
          "GraphQlResolverQuerylistNEWMEMBERTOKENS": {
            "Type": "AWS::AppSync::Resolver",
            "DependsOn": "GraphQlSchema",
            "Properties": {
              "ApiId": {
                "Fn::GetAtt": [
                  "GraphQlApi",
                  "ApiId"
                ]
              },
              "TypeName": "Query",
              "FieldName": "listNEW_MEMBER_TOKENS",
              "RequestMappingTemplate": "{\r\n  \"version\": \"2018-05-29\",\r\n  \"statements\": [\r\n    \"SELECT * FROM NEW_MEMBER_TOKEN\"\r\n  ]\r\n}",
              "ResponseMappingTemplate": "$util.toJson($context.result.sqlStatementResults[0])",
              "Kind": "UNIT",
              "DataSourceName": {
                "Fn::GetAtt": [
                  "GraphQlDsStageDataSource",
                  "Name"
                ]
              }
            }
          },
          "GraphQlResolverQuerylistORIGINPRODUCTS": {
            "Type": "AWS::AppSync::Resolver",
            "DependsOn": "GraphQlSchema",
            "Properties": {
              "ApiId": {
                "Fn::GetAtt": [
                  "GraphQlApi",
                  "ApiId"
                ]
              },
              "TypeName": "Query",
              "FieldName": "listORIGIN_PRODUCTS",
              "RequestMappingTemplate": "{\r\n  \"version\": \"2018-05-29\",\r\n  \"statements\": [\r\n    \"SELECT ORIGIN_PRODUCT_ID, VENDOR_NAME, PRODUCT_ID, PRODUCT_DESC, PSCU_CLIENT_ID, PARTNER_CODE, CREATED_BY_USER_ID, CREATED_DATE, CHANGED_BY_USER_ID, CHANGED_DATE FROM ORIGIN_PRODUCT ORDER BY ORIGIN_PRODUCT_ID#if($ctx.args.nextToken) OFFSET $ctx.args.nextToken#end#if($ctx.args.limit) LIMIT $ctx.args.limit#end\"\r\n  ]\r\n}",
              "ResponseMappingTemplate": "## Raise a GraphQL field error in case of a datasource invocation error\r\n#if($ctx.error)\r\n    $utils.error($ctx.error.message, $ctx.error.type)\r\n#end\r\n\r\n#set($result = $utils.rds.toJsonObject($ctx.result)[0])\r\n#set($items = $result)\r\n#set($hasNextToken = false)\r\n#if($ctx.args.limit && $items.size() == $ctx.args.limit)\r\n  #set($hasNextToken = true)\r\n  #set($nextTokenValue = $ctx.args.nextToken)\r\n  #if(!$nextTokenValue)\r\n    #set($nextTokenValue = 0)\r\n  #end\r\n  #set($nextTokenValue = $nextTokenValue + $ctx.args.limit)\r\n#end\r\n{\r\n  \"items\": $util.toJson($items),\r\n  #if($hasNextToken)\"nextToken\": \"$nextTokenValue\"#else\"nextToken\": null#end\r\n}",
              "Kind": "UNIT",
              "DataSourceName": {
                "Fn::GetAtt": [
                  "GraphQlDsStageDataSource",
                  "Name"
                ]
              }
            }
          },
          "GraphQlResolverQuerylistSERVICEPROVIDERS": {
            "Type": "AWS::AppSync::Resolver",
            "DependsOn": "GraphQlSchema",
            "Properties": {
              "ApiId": {
                "Fn::GetAtt": [
                  "GraphQlApi",
                  "ApiId"
                ]
              },
              "TypeName": "Query",
              "FieldName": "listSERVICE_PROVIDERS",
              "RequestMappingTemplate": "{\r\n  \"version\": \"2018-05-29\",\r\n  \"statements\": [\r\n    \"SELECT SERVICE_PROVIDER_ID, SERVICE_PROVIDER_NAME, CREATED_BY_USER_ID, CREATED_DATE, CHANGED_BY_USER_ID, CHANGED_DATE FROM SERVICE_PROVIDER ORDER BY SERVICE_PROVIDER_ID#if($ctx.args.nextToken) OFFSET $ctx.args.nextToken#end#if($ctx.args.limit) LIMIT $ctx.args.limit#end\"\r\n  ]\r\n}",
              "ResponseMappingTemplate": "## Raise a GraphQL field error in case of a datasource invocation error\r\n#if($ctx.error)\r\n    $utils.error($ctx.error.message, $ctx.error.type)\r\n#end\r\n\r\n#set($result = $utils.rds.toJsonObject($ctx.result)[0])\r\n#set($items = $result)\r\n#set($hasNextToken = false)\r\n#if($ctx.args.limit && $items.size() == $ctx.args.limit)\r\n  #set($hasNextToken = true)\r\n  #set($nextTokenValue = $ctx.args.nextToken)\r\n  #if(!$nextTokenValue)\r\n    #set($nextTokenValue = 0)\r\n  #end\r\n  #set($nextTokenValue = $nextTokenValue + $ctx.args.limit)\r\n#end\r\n{\r\n  \"items\": $util.toJson($items),\r\n  #if($hasNextToken)\"nextToken\": \"$nextTokenValue\"#else\"nextToken\": null#end\r\n}",
              "Kind": "UNIT",
              "DataSourceName": {
                "Fn::GetAtt": [
                  "GraphQlDsStageDataSource",
                  "Name"
                ]
              }
            }
          },
          "GraphQlResolverQuerylistSERVICES": {
            "Type": "AWS::AppSync::Resolver",
            "DependsOn": "GraphQlSchema",
            "Properties": {
              "ApiId": {
                "Fn::GetAtt": [
                  "GraphQlApi",
                  "ApiId"
                ]
              },
              "TypeName": "Query",
              "FieldName": "listSERVICES",
              "RequestMappingTemplate": "{\r\n  \"version\": \"2018-05-29\",\r\n  \"statements\": [\r\n    \"SELECT * FROM SERVICE ORDER BY SERVICE_ID#if($ctx.args.nextToken) OFFSET $ctx.args.nextToken#end#if($ctx.args.limit) LIMIT $ctx.args.limit#end\"\r\n  ]\r\n}",
              "ResponseMappingTemplate": "## Raise a GraphQL field error in case of a datasource invocation error\r\n#if($ctx.error)\r\n    $utils.error($ctx.error.message, $ctx.error.type)\r\n#end\r\n\r\n#set($result = $utils.rds.toJsonObject($ctx.result)[0])\r\n#set($items = $result)\r\n#set($hasNextToken = false)\r\n#if($ctx.args.limit && $items.size() == $ctx.args.limit)\r\n  #set($hasNextToken = true)\r\n  #set($nextTokenValue = $ctx.args.nextToken)\r\n  #if(!$nextTokenValue)\r\n    #set($nextTokenValue = 0)\r\n  #end\r\n  #set($nextTokenValue = $nextTokenValue + $ctx.args.limit)\r\n#end\r\n{\r\n  \"items\": $util.toJson($items),\r\n  #if($hasNextToken)\"nextToken\": \"$nextTokenValue\"#else\"nextToken\": null#end\r\n}",
              "Kind": "UNIT",
              "DataSourceName": {
                "Fn::GetAtt": [
                  "GraphQlDsStageDataSource",
                  "Name"
                ]
              }
            }
          },
          "GraphQlResolverQuerylistREDIRECTURLS": {
            "Type": "AWS::AppSync::Resolver",
            "DependsOn": "GraphQlSchema",
            "Properties": {
              "ApiId": {
                "Fn::GetAtt": [
                  "GraphQlApi",
                  "ApiId"
                ]
              },
              "TypeName": "Query",
              "FieldName": "listREDIRECT_URLS",
              "RequestMappingTemplate": "{\r\n  \"version\": \"2018-05-29\",\r\n  \"statements\": [\r\n    \"SELECT REDIRECT_URL_ID, ORIGIN_PRODUCT_ID, URL_TYPE_CODE, URL, RESPONSE_TEXT, CREATED_BY_USER_ID, CREATED_DATE, CHANGED_BY_USER_ID, CHANGED_DATE FROM REDIRECT_URL ORDER BY REDIRECT_URL_ID#if($ctx.args.nextToken) OFFSET $ctx.args.nextToken#end#if($ctx.args.limit) LIMIT $ctx.args.limit#end\"\r\n  ]\r\n}",
              "ResponseMappingTemplate": "## Raise a GraphQL field error in case of a datasource invocation error\r\n#if($ctx.error)\r\n    $utils.error($ctx.error.message, $ctx.error.type)\r\n#end\r\n\r\n#set($result = $utils.rds.toJsonObject($ctx.result)[0])\r\n#set($items = $result)\r\n#set($hasNextToken = false)\r\n#if($ctx.args.limit && $items.size() == $ctx.args.limit)\r\n  #set($hasNextToken = true)\r\n  #set($nextTokenValue = $ctx.args.nextToken)\r\n  #if(!$nextTokenValue)\r\n    #set($nextTokenValue = 0)\r\n  #end\r\n  #set($nextTokenValue = $nextTokenValue + $ctx.args.limit)\r\n#end\r\n{\r\n  \"items\": $util.toJson($items),\r\n  #if($hasNextToken)\"nextToken\": \"$nextTokenValue\"#else\"nextToken\": null#end\r\n}",
              "Kind": "UNIT",
              "DataSourceName": {
                "Fn::GetAtt": [
                  "GraphQlDsStageDataSource",
                  "Name"
                ]
              }
            }
          },
          "GraphQlResolverQuerylistSERVICEPARAMS": {
            "Type": "AWS::AppSync::Resolver",
            "DependsOn": "GraphQlSchema",
            "Properties": {
              "ApiId": {
                "Fn::GetAtt": [
                  "GraphQlApi",
                  "ApiId"
                ]
              },
              "TypeName": "Query",
              "FieldName": "listSERVICE_PARAMS",
              "RequestMappingTemplate": "{\r\n  \"version\": \"2018-05-29\",\r\n  \"statements\": [\r\n    \"SELECT * FROM SERVICE_PARAM ORDER BY SERVICE_PARAM_ID#if($ctx.args.nextToken) OFFSET $ctx.args.nextToken#end#if($ctx.args.limit) LIMIT $ctx.args.limit#end\"\r\n  ]\r\n}",
              "ResponseMappingTemplate": "#set($result = $utils.rds.toJsonObject($ctx.result)[0])\r\n#set($items = $result)\r\n#set($hasNextToken = false)\r\n#if($ctx.args.limit && $items.size() == $ctx.args.limit)\r\n  #set($hasNextToken = true)\r\n  #set($nextTokenValue = $ctx.args.nextToken)\r\n  #if(!$nextTokenValue)\r\n    #set($nextTokenValue = 0)\r\n  #end\r\n  #set($nextTokenValue = $nextTokenValue + $ctx.args.limit)\r\n#end\r\n{\r\n  \"items\": $util.toJson($items),\r\n  #if($hasNextToken)\"nextToken\": \"$nextTokenValue\"#else\"nextToken\": null#end\r\n}",
              "Kind": "UNIT",
              "DataSourceName": {
                "Fn::GetAtt": [
                  "GraphQlDsStageDataSource",
                  "Name"
                ]
              }
            }
          },
          "GraphQlResolverQuerylistSERVICEPARAMMAPPINGS": {
            "Type": "AWS::AppSync::Resolver",
            "DependsOn": "GraphQlSchema",
            "Properties": {
              "ApiId": {
                "Fn::GetAtt": [
                  "GraphQlApi",
                  "ApiId"
                ]
              },
              "TypeName": "Query",
              "FieldName": "listSERVICE_PARAM_MAPPINGS",
              "RequestMappingTemplate": "{\r\n  \"version\": \"2018-05-29\",\r\n  \"statements\": [\r\n    \"SELECT * FROM SERVICE_PARAM_MAPPING ORDER BY SERVICE_PARAM_MAPPING_ID#if($ctx.args.nextToken) OFFSET $ctx.args.nextToken#end#if($ctx.args.limit) LIMIT $ctx.args.limit#end\"\r\n  ]\r\n}",
              "ResponseMappingTemplate": "#set($result = $utils.rds.toJsonObject($ctx.result)[0])\r\n#set($items = $result)\r\n#set($hasNextToken = false)\r\n#if($ctx.args.limit && $items.size() == $ctx.args.limit)\r\n  #set($hasNextToken = true)\r\n  #set($nextTokenValue = $ctx.args.nextToken)\r\n  #if(!$nextTokenValue)\r\n    #set($nextTokenValue = 0)\r\n  #end\r\n  #set($nextTokenValue = $nextTokenValue + $ctx.args.limit)\r\n#end\r\n{\r\n  \"items\": $util.toJson($items),\r\n  #if($hasNextToken)\"nextToken\": \"$nextTokenValue\"#else\"nextToken\": null#end\r\n}",
              "Kind": "UNIT",
              "DataSourceName": {
                "Fn::GetAtt": [
                  "GraphQlDsStageDataSource",
                  "Name"
                ]
              }
            }
          },
          "GraphQlResolverQuerylistSTEPTYPES": {
            "Type": "AWS::AppSync::Resolver",
            "DependsOn": "GraphQlSchema",
            "Properties": {
              "ApiId": {
                "Fn::GetAtt": [
                  "GraphQlApi",
                  "ApiId"
                ]
              },
              "TypeName": "Query",
              "FieldName": "listSTEP_TYPES",
              "RequestMappingTemplate": "{\r\n  \"version\": \"2018-05-29\",\r\n  \"statements\": [\r\n    \"SELECT * FROM STEP_TYPE ORDER BY STEP_TYPE_ID#if($ctx.args.nextToken) OFFSET $ctx.args.nextToken#end#if($ctx.args.limit) LIMIT $ctx.args.limit#end\"\r\n  ]\r\n}",
              "ResponseMappingTemplate": "#set($result = $utils.rds.toJsonObject($ctx.result)[0])\r\n#set($items = $result)\r\n#set($hasNextToken = false)\r\n#if($ctx.args.limit && $items.size() == $ctx.args.limit)\r\n  #set($hasNextToken = true)\r\n  #set($nextTokenValue = $ctx.args.nextToken)\r\n  #if(!$nextTokenValue)\r\n    #set($nextTokenValue = 0)\r\n  #end\r\n  #set($nextTokenValue = $nextTokenValue + $ctx.args.limit)\r\n#end\r\n{\r\n  \"items\": $util.toJson($items),\r\n  #if($hasNextToken)\"nextToken\": \"$nextTokenValue\"#else\"nextToken\": null#end\r\n}",
              "Kind": "UNIT",
              "DataSourceName": {
                "Fn::GetAtt": [
                  "GraphQlDsStageDataSource",
                  "Name"
                ]
              }
            }
          },
          "GraphQlResolverQuerylistSTEPSERVICEMAPPINGS": {
            "Type": "AWS::AppSync::Resolver",
            "DependsOn": "GraphQlSchema",
            "Properties": {
              "ApiId": {
                "Fn::GetAtt": [
                  "GraphQlApi",
                  "ApiId"
                ]
              },
              "TypeName": "Query",
              "FieldName": "listSTEP_SERVICE_MAPPINGS",
              "RequestMappingTemplate": "{\r\n  \"version\": \"2018-05-29\",\r\n  \"statements\": [\r\n    \"SELECT * FROM STEP_SERVICE_MAPPING ORDER BY STEP_SERVICE_MAPPING_ID#if($ctx.args.nextToken) OFFSET $ctx.args.nextToken#end#if($ctx.args.limit) LIMIT $ctx.args.limit#end\"\r\n  ]\r\n}",
              "ResponseMappingTemplate": "#set($result = $utils.rds.toJsonObject($ctx.result)[0])\r\n#set($items = $result)\r\n#set($hasNextToken = false)\r\n#if($ctx.args.limit && $items.size() == $ctx.args.limit)\r\n  #set($hasNextToken = true)\r\n  #set($nextTokenValue = $ctx.args.nextToken)\r\n  #if(!$nextTokenValue)\r\n    #set($nextTokenValue = 0)\r\n  #end\r\n  #set($nextTokenValue = $nextTokenValue + $ctx.args.limit)\r\n#end\r\n{\r\n  \"items\": $util.toJson($items),\r\n  #if($hasNextToken)\"nextToken\": \"$nextTokenValue\"#else\"nextToken\": null#end\r\n}",
              "Kind": "UNIT",
              "DataSourceName": {
                "Fn::GetAtt": [
                  "GraphQlDsStageDataSource",
                  "Name"
                ]
              }
            }
          },
          "GraphQlResolverQuerylistSERVICEEXPRMAPPINGS": {
            "Type": "AWS::AppSync::Resolver",
            "DependsOn": "GraphQlSchema",
            "Properties": {
              "ApiId": {
                "Fn::GetAtt": [
                  "GraphQlApi",
                  "ApiId"
                ]
              },
              "TypeName": "Query",
              "FieldName": "listSERVICE_EXPR_MAPPINGS",
              "RequestMappingTemplate": "{\r\n  \"version\": \"2018-05-29\",\r\n  \"statements\": [\r\n    \"SELECT * FROM SERVICE_EXPR_MAPPING ORDER BY SERVICE_EXPR_MAPPING_ID#if($ctx.args.nextToken) OFFSET $ctx.args.nextToken#end#if($ctx.args.limit) LIMIT $ctx.args.limit#end\"\r\n  ]\r\n}",
              "ResponseMappingTemplate": "#set($result = $utils.rds.toJsonObject($ctx.result)[0])\r\n#set($items = $result)\r\n#set($hasNextToken = false)\r\n#if($ctx.args.limit && $items.size() == $ctx.args.limit)\r\n  #set($hasNextToken = true)\r\n  #set($nextTokenValue = $ctx.args.nextToken)\r\n  #if(!$nextTokenValue)\r\n    #set($nextTokenValue = 0)\r\n  #end\r\n  #set($nextTokenValue = $nextTokenValue + $ctx.args.limit)\r\n#end\r\n{\r\n  \"items\": $util.toJson($items),\r\n  #if($hasNextToken)\"nextToken\": \"$nextTokenValue\"#else\"nextToken\": null#end\r\n}",
              "Kind": "UNIT",
              "DataSourceName": {
                "Fn::GetAtt": [
                  "GraphQlDsStageDataSource",
                  "Name"
                ]
              }
            }
          },
          "GraphQlResolverMutationcreateORIGINPRODUCT": {
            "Type": "AWS::AppSync::Resolver",
            "DependsOn": "GraphQlSchema",
            "Properties": {
              "ApiId": {
                "Fn::GetAtt": [
                  "GraphQlApi",
                  "ApiId"
                ]
              },
              "TypeName": "Mutation",
              "FieldName": "createORIGIN_PRODUCT",
              "RequestMappingTemplate": "{\r\n  \"version\": \"2018-05-29\",\r\n  \"statements\": [\r\n    \"INSERT INTO ORIGIN_PRODUCT (VENDOR_NAME, PRODUCT_ID, PRODUCT_DESC, PSCU_CLIENT_ID, PARTNER_CODE, CREATED_BY_USER_ID, CREATED_DATE) VALUES (:VENDOR_NAME, :PRODUCT_ID, :PRODUCT_DESC, :PSCU_CLIENT_ID, :PARTNER_CODE, :CREATED_BY_USER_ID, :CREATED_DATE)\"\r\n  ],\r\n  \"variableMap\": {\r\n    \":VENDOR_NAME\": \"$ctx.args.input.VENDOR_NAME\",\r\n    \":PRODUCT_ID\": \"$ctx.args.input.PRODUCT_ID\",\r\n    \":PRODUCT_DESC\": \"$ctx.args.input.PRODUCT_DESC\",\r\n    \":PSCU_CLIENT_ID\": $ctx.args.input.PSCU_CLIENT_ID,\r\n    \":PARTNER_CODE\": #if($ctx.args.input.PARTNER_CODE)\"$ctx.args.input.PARTNER_CODE\"#else null #end,\r\n    \":CREATED_BY_USER_ID\": $ctx.args.input.CREATED_BY_USER_ID,\r\n    \":CREATED_DATE\": \"$ctx.args.input.CREATED_DATE\"\r\n  }\r\n}",
              "ResponseMappingTemplate": "#if($ctx.error)\r\n  $util.error($ctx.error.message, $ctx.error.type)\r\n#end\r\n\r\n{\r\n  \"ORIGIN_PRODUCT_ID\": 999,\r\n  \"VENDOR_NAME\": \"$ctx.args.input.VENDOR_NAME\",\r\n  \"PRODUCT_ID\": \"$ctx.args.input.PRODUCT_ID\",\r\n  \"PRODUCT_DESC\": \"$ctx.args.input.PRODUCT_DESC\",\r\n  \"PSCU_CLIENT_ID\": $ctx.args.input.PSCU_CLIENT_ID,\r\n  \"PARTNER_CODE\": \"$ctx.args.input.PARTNER_CODE\",\r\n  \"CREATED_BY_USER_ID\": $ctx.args.input.CREATED_BY_USER_ID,\r\n  \"CREATED_DATE\": \"$ctx.args.input.CREATED_DATE\",\r\n  \"CHANGED_BY_USER_ID\": null,\r\n  \"CHANGED_DATE\": null\r\n}",
              "Kind": "UNIT",
              "DataSourceName": {
                "Fn::GetAtt": [
                  "GraphQlDsStageDataSource",
                  "Name"
                ]
              }
            }
          },
          "GraphQlResolverMutationupdateORIGINPRODUCT": {
            "Type": "AWS::AppSync::Resolver",
            "DependsOn": "GraphQlSchema",
            "Properties": {
              "ApiId": {
                "Fn::GetAtt": [
                  "GraphQlApi",
                  "ApiId"
                ]
              },
              "TypeName": "Mutation",
              "FieldName": "updateORIGIN_PRODUCT",
              "RequestMappingTemplate": "{\r\n  \"version\": \"2018-05-29\",\r\n  \"statements\": [\r\n    \"UPDATE ORIGIN_PRODUCT SET VENDOR_NAME = :VENDOR_NAME, PRODUCT_ID = :PRODUCT_ID, PRODUCT_DESC = :PRODUCT_DESC, PSCU_CLIENT_ID = :PSCU_CLIENT_ID, PARTNER_CODE = :PARTNER_CODE, CHANGED_BY_USER_ID = :CHANGED_BY_USER_ID, CHANGED_DATE = :CHANGED_DATE WHERE ORIGIN_PRODUCT_ID = :ORIGIN_PRODUCT_ID\"\r\n  ],\r\n  \"variableMap\": {\r\n    \":ORIGIN_PRODUCT_ID\": $ctx.args.input.ORIGIN_PRODUCT_ID,\r\n    \":VENDOR_NAME\": \"$ctx.args.input.VENDOR_NAME\",\r\n    \":PRODUCT_ID\": \"$ctx.args.input.PRODUCT_ID\",\r\n    \":PRODUCT_DESC\": \"$ctx.args.input.PRODUCT_DESC\",\r\n    \":PSCU_CLIENT_ID\": $ctx.args.input.PSCU_CLIENT_ID,\r\n    \":PARTNER_CODE\": #if($ctx.args.input.PARTNER_CODE)\"$ctx.args.input.PARTNER_CODE\"#else null #end,\r\n    \":CHANGED_BY_USER_ID\": $ctx.args.input.CHANGED_BY_USER_ID,\r\n    \":CHANGED_DATE\": \"$ctx.args.input.CHANGED_DATE\"\r\n  }\r\n}",
              "ResponseMappingTemplate": "#if($ctx.error)\r\n  $util.error($ctx.error.message, $ctx.error.type)\r\n#end\r\n\r\n{\r\n  \"ORIGIN_PRODUCT_ID\": $ctx.args.input.ORIGIN_PRODUCT_ID,\r\n  \"VENDOR_NAME\": \"$ctx.args.input.VENDOR_NAME\",\r\n  \"PRODUCT_ID\": \"$ctx.args.input.PRODUCT_ID\",\r\n  \"PRODUCT_DESC\": \"$ctx.args.input.PRODUCT_DESC\",\r\n  \"PSCU_CLIENT_ID\": $ctx.args.input.PSCU_CLIENT_ID,\r\n  \"PARTNER_CODE\": \"$ctx.args.input.PARTNER_CODE\",\r\n  \"CREATED_BY_USER_ID\": 1,\r\n  \"CREATED_DATE\": \"2024-01-01\",\r\n  \"CHANGED_BY_USER_ID\": $ctx.args.input.CHANGED_BY_USER_ID,\r\n  \"CHANGED_DATE\": \"$ctx.args.input.CHANGED_DATE\"\r\n}",
              "Kind": "UNIT",
              "DataSourceName": {
                "Fn::GetAtt": [
                  "GraphQlDsStageDataSource",
                  "Name"
                ]
              }
            }
          },
          "GraphQlResolverMutationdeleteORIGINPRODUCT": {
            "Type": "AWS::AppSync::Resolver",
            "DependsOn": "GraphQlSchema",
            "Properties": {
              "ApiId": {
                "Fn::GetAtt": [
                  "GraphQlApi",
                  "ApiId"
                ]
              },
              "TypeName": "Mutation",
              "FieldName": "deleteORIGIN_PRODUCT",
              "RequestMappingTemplate": "{\r\n  \"version\": \"2018-05-29\",\r\n  \"statements\": [\r\n    \"DELETE FROM ORIGIN_PRODUCT WHERE ORIGIN_PRODUCT_ID = :ORIGIN_PRODUCT_ID\"\r\n  ],\r\n  \"variableMap\": {\r\n    \":ORIGIN_PRODUCT_ID\": $util.toJson($ctx.args.input.ORIGIN_PRODUCT_ID)\r\n  }\r\n}",
              "ResponseMappingTemplate": "#if($ctx.error)\r\n  $util.error($ctx.error.message, $ctx.error.type)\r\n#end\r\n\r\n{\r\n  \"ORIGIN_PRODUCT_ID\": $ctx.args.input.ORIGIN_PRODUCT_ID,\r\n  \"VENDOR_NAME\": \"DELETED\",\r\n  \"PRODUCT_ID\": \"DELETED\",\r\n  \"PRODUCT_DESC\": \"DELETED\",\r\n  \"PSCU_CLIENT_ID\": 0,\r\n  \"PARTNER_CODE\": null,\r\n  \"CREATED_BY_USER_ID\": 1,\r\n  \"CREATED_DATE\": \"2024-01-01\",\r\n  \"CHANGED_BY_USER_ID\": null,\r\n  \"CHANGED_DATE\": null\r\n}",
              "Kind": "UNIT",
              "DataSourceName": {
                "Fn::GetAtt": [
                  "GraphQlDsStageDataSource",
                  "Name"
                ]
              }
            }
          },
          "GraphQlResolverMutationcreateREDIRECTURL": {
            "Type": "AWS::AppSync::Resolver",
            "DependsOn": "GraphQlSchema",
            "Properties": {
              "ApiId": {
                "Fn::GetAtt": [
                  "GraphQlApi",
                  "ApiId"
                ]
              },
              "TypeName": "Mutation",
              "FieldName": "createREDIRECT_URL",
              "RequestMappingTemplate": "## Authorization check\r\n#if(!$ctx.identity || !$ctx.identity.sub)\r\n  $util.unauthorized()\r\n#end\r\n\r\n## Input validation\r\n#if(!$ctx.args.input.URL || $ctx.args.input.URL.length() == 0)\r\n  $util.error(\"URL is required\", \"ValidationError\")\r\n#end\r\n#if(!$ctx.args.input.URL_TYPE_CODE.matches(\"^[EN]$\"))\r\n  $util.error(\"URL_TYPE_CODE must be E or N\", \"ValidationError\")\r\n#end\r\n\r\n{\r\n  \"version\": \"2018-05-29\",\r\n  \"statements\": [\r\n    \"INSERT INTO REDIRECT_URL (ORIGIN_PRODUCT_ID, URL_TYPE_CODE, URL, RESPONSE_TEXT, CREATED_BY_USER_ID, CREATED_DATE) VALUES (:ORIGIN_PRODUCT_ID, :URL_TYPE_CODE, :URL, :RESPONSE_TEXT, :CREATED_BY_USER_ID, :CREATED_DATE)\"\r\n  ],\r\n  \"variableMap\": {\r\n    \":ORIGIN_PRODUCT_ID\": $util.toJson($ctx.args.input.ORIGIN_PRODUCT_ID),\r\n    \":URL_TYPE_CODE\": $util.toJson($ctx.args.input.URL_TYPE_CODE),\r\n    \":URL\": $util.toJson($ctx.args.input.URL),\r\n    \":RESPONSE_TEXT\": $util.toJson($ctx.args.input.RESPONSE_TEXT),\r\n    \":CREATED_BY_USER_ID\": $util.toJson($ctx.args.input.CREATED_BY_USER_ID),\r\n    \":CREATED_DATE\": $util.toJson($ctx.args.input.CREATED_DATE)\r\n  }\r\n}",
              "ResponseMappingTemplate": "#if($ctx.error)\r\n  $util.error($ctx.error.message, $ctx.error.type)\r\n#end\r\n\r\n{\r\n  \"REDIRECT_URL_ID\": 999,\r\n  \"ORIGIN_PRODUCT_ID\": $ctx.args.input.ORIGIN_PRODUCT_ID,\r\n  \"URL_TYPE_CODE\": \"$ctx.args.input.URL_TYPE_CODE\",\r\n  \"URL\": \"$ctx.args.input.URL\",\r\n  \"RESPONSE_TEXT\": \"$ctx.args.input.RESPONSE_TEXT\",\r\n  \"CREATED_BY_USER_ID\": $ctx.args.input.CREATED_BY_USER_ID,\r\n  \"CREATED_DATE\": \"$ctx.args.input.CREATED_DATE\",\r\n  \"CHANGED_BY_USER_ID\": null,\r\n  \"CHANGED_DATE\": null\r\n}",
              "Kind": "UNIT",
              "DataSourceName": {
                "Fn::GetAtt": [
                  "GraphQlDsStageDataSource",
                  "Name"
                ]
              }
            }
          },
          "GraphQlResolverMutationupdateREDIRECTURL": {
            "Type": "AWS::AppSync::Resolver",
            "DependsOn": "GraphQlSchema",
            "Properties": {
              "ApiId": {
                "Fn::GetAtt": [
                  "GraphQlApi",
                  "ApiId"
                ]
              },
              "TypeName": "Mutation",
              "FieldName": "updateREDIRECT_URL",
              "RequestMappingTemplate": "## Authorization check\r\n#if(!$ctx.identity || !$ctx.identity.sub)\r\n  $util.unauthorized()\r\n#end\r\n\r\n## Input validation\r\n#if(!$ctx.args.input.URL || $ctx.args.input.URL.length() == 0)\r\n  $util.error(\"URL is required\", \"ValidationError\")\r\n#end\r\n#if(!$ctx.args.input.URL_TYPE_CODE.matches(\"^[EN]$\"))\r\n  $util.error(\"URL_TYPE_CODE must be E or N\", \"ValidationError\")\r\n#end\r\n\r\n{\r\n  \"version\": \"2018-05-29\",\r\n  \"statements\": [\r\n    \"UPDATE REDIRECT_URL SET ORIGIN_PRODUCT_ID = :ORIGIN_PRODUCT_ID, URL_TYPE_CODE = :URL_TYPE_CODE, URL = :URL, RESPONSE_TEXT = :RESPONSE_TEXT, CHANGED_BY_USER_ID = :CHANGED_BY_USER_ID, CHANGED_DATE = :CHANGED_DATE WHERE REDIRECT_URL_ID = :REDIRECT_URL_ID\"\r\n  ],\r\n  \"variableMap\": {\r\n    \":REDIRECT_URL_ID\": $util.toJson($ctx.args.input.REDIRECT_URL_ID),\r\n    \":ORIGIN_PRODUCT_ID\": $util.toJson($ctx.args.input.ORIGIN_PRODUCT_ID),\r\n    \":URL_TYPE_CODE\": $util.toJson($ctx.args.input.URL_TYPE_CODE),\r\n    \":URL\": $util.toJson($ctx.args.input.URL),\r\n    \":RESPONSE_TEXT\": $util.toJson($ctx.args.input.RESPONSE_TEXT),\r\n    \":CHANGED_BY_USER_ID\": $util.toJson($ctx.args.input.CHANGED_BY_USER_ID),\r\n    \":CHANGED_DATE\": $util.toJson($ctx.args.input.CHANGED_DATE)\r\n  }\r\n}",
              "ResponseMappingTemplate": "#if($ctx.error)\r\n  $util.error($ctx.error.message, $ctx.error.type)\r\n#end\r\n\r\n{\r\n  \"REDIRECT_URL_ID\": $ctx.args.input.REDIRECT_URL_ID,\r\n  \"ORIGIN_PRODUCT_ID\": $ctx.args.input.ORIGIN_PRODUCT_ID,\r\n  \"URL_TYPE_CODE\": \"$ctx.args.input.URL_TYPE_CODE\",\r\n  \"URL\": \"$ctx.args.input.URL\",\r\n  \"RESPONSE_TEXT\": \"$ctx.args.input.RESPONSE_TEXT\",\r\n  \"CREATED_BY_USER_ID\": 1,\r\n  \"CREATED_DATE\": \"2024-01-01\",\r\n  \"CHANGED_BY_USER_ID\": $ctx.args.input.CHANGED_BY_USER_ID,\r\n  \"CHANGED_DATE\": \"$ctx.args.input.CHANGED_DATE\"\r\n}",
              "Kind": "UNIT",
              "DataSourceName": {
                "Fn::GetAtt": [
                  "GraphQlDsStageDataSource",
                  "Name"
                ]
              }
            }
          },
          "GraphQlResolverMutationdeleteREDIRECTURL": {
            "Type": "AWS::AppSync::Resolver",
            "DependsOn": "GraphQlSchema",
            "Properties": {
              "ApiId": {
                "Fn::GetAtt": [
                  "GraphQlApi",
                  "ApiId"
                ]
              },
              "TypeName": "Mutation",
              "FieldName": "deleteREDIRECT_URL",
              "RequestMappingTemplate": "## Authorization check\r\n#if(!$ctx.identity || !$ctx.identity.sub)\r\n  $util.unauthorized()\r\n#end\r\n\r\n## Additional security: Only allow deletion of own records (optional)\r\n## Uncomment to enable:\r\n## SELECT CREATED_BY_USER_ID FROM REDIRECT_URL WHERE REDIRECT_URL_ID = :REDIRECT_URL_ID AND CREATED_BY_USER_ID = :USER_ID\r\n\r\n{\r\n  \"version\": \"2018-05-29\",\r\n  \"statements\": [\r\n    \"DELETE FROM REDIRECT_URL WHERE REDIRECT_URL_ID = :REDIRECT_URL_ID\"\r\n  ],\r\n  \"variableMap\": {\r\n    \":REDIRECT_URL_ID\": $util.toJson($ctx.args.input.REDIRECT_URL_ID)\r\n  }\r\n}",
              "ResponseMappingTemplate": "#if($ctx.error)\r\n  $util.error($ctx.error.message, $ctx.error.type)\r\n#end\r\n\r\n{\r\n  \"REDIRECT_URL_ID\": $ctx.args.input.REDIRECT_URL_ID,\r\n  \"ORIGIN_PRODUCT_ID\": 1,\r\n  \"URL_TYPE_CODE\": \"DELETED\",\r\n  \"URL\": \"DELETED\",\r\n  \"RESPONSE_TEXT\": null,\r\n  \"CREATED_BY_USER_ID\": 1,\r\n  \"CREATED_DATE\": \"2024-01-01\",\r\n  \"CHANGED_BY_USER_ID\": null,\r\n  \"CHANGED_DATE\": null\r\n}",
              "Kind": "UNIT",
              "DataSourceName": {
                "Fn::GetAtt": [
                  "GraphQlDsStageDataSource",
                  "Name"
                ]
              }
            }
          },
          "GraphQlResolverMutationcreateSERVICEPROVIDER": {
            "Type": "AWS::AppSync::Resolver",
            "DependsOn": "GraphQlSchema",
            "Properties": {
              "ApiId": {
                "Fn::GetAtt": [
                  "GraphQlApi",
                  "ApiId"
                ]
              },
              "TypeName": "Mutation",
              "FieldName": "createSERVICE_PROVIDER",
              "RequestMappingTemplate": "{\r\n  \"version\": \"2018-05-29\",\r\n  \"statements\": [\r\n    \"INSERT INTO SERVICE_PROVIDER (SERVICE_PROVIDER_NAME, CREATED_BY_USER_ID, CREATED_DATE) VALUES (:SERVICE_PROVIDER_NAME, :CREATED_BY_USER_ID, :CREATED_DATE)\",\r\n    \"SELECT * FROM SERVICE_PROVIDER WHERE SERVICE_PROVIDER_ID = LAST_INSERT_ID()\"\r\n  ],\r\n  \"variableMap\": {\r\n    \":SERVICE_PROVIDER_NAME\": \"$ctx.args.input.SERVICE_PROVIDER_NAME\",\r\n    \":CREATED_BY_USER_ID\": $ctx.args.input.CREATED_BY_USER_ID,\r\n    \":CREATED_DATE\": \"$ctx.args.input.CREATED_DATE\"\r\n  }\r\n}",
              "ResponseMappingTemplate": "$util.toJson($ctx.result.records[0])",
              "Kind": "UNIT",
              "DataSourceName": {
                "Fn::GetAtt": [
                  "GraphQlDsStageDataSource",
                  "Name"
                ]
              }
            }
          },
          "GraphQlResolverMutationupdateSERVICEPROVIDER": {
            "Type": "AWS::AppSync::Resolver",
            "DependsOn": "GraphQlSchema",
            "Properties": {
              "ApiId": {
                "Fn::GetAtt": [
                  "GraphQlApi",
                  "ApiId"
                ]
              },
              "TypeName": "Mutation",
              "FieldName": "updateSERVICE_PROVIDER",
              "RequestMappingTemplate": "{\r\n  \"version\": \"2018-05-29\",\r\n  \"statements\": [\r\n    \"UPDATE SERVICE_PROVIDER SET SERVICE_PROVIDER_NAME = :SERVICE_PROVIDER_NAME, CHANGED_BY_USER_ID = :CHANGED_BY_USER_ID, CHANGED_DATE = :CHANGED_DATE WHERE SERVICE_PROVIDER_ID = :SERVICE_PROVIDER_ID\",\r\n    \"SELECT * FROM SERVICE_PROVIDER WHERE SERVICE_PROVIDER_ID = :SERVICE_PROVIDER_ID\"\r\n  ],\r\n  \"variableMap\": {\r\n    \":SERVICE_PROVIDER_ID\": $ctx.args.input.SERVICE_PROVIDER_ID,\r\n    \":SERVICE_PROVIDER_NAME\": \"$ctx.args.input.SERVICE_PROVIDER_NAME\",\r\n    \":CHANGED_BY_USER_ID\": $ctx.args.input.CHANGED_BY_USER_ID,\r\n    \":CHANGED_DATE\": \"$ctx.args.input.CHANGED_DATE\"\r\n  }\r\n}",
              "ResponseMappingTemplate": "$util.toJson($ctx.result.records[0])",
              "Kind": "UNIT",
              "DataSourceName": {
                "Fn::GetAtt": [
                  "GraphQlDsStageDataSource",
                  "Name"
                ]
              }
            }
          },
          "GraphQlResolverMutationdeleteSERVICEPROVIDER": {
            "Type": "AWS::AppSync::Resolver",
            "DependsOn": "GraphQlSchema",
            "Properties": {
              "ApiId": {
                "Fn::GetAtt": [
                  "GraphQlApi",
                  "ApiId"
                ]
              },
              "TypeName": "Mutation",
              "FieldName": "deleteSERVICE_PROVIDER",
              "RequestMappingTemplate": "{\r\n  \"version\": \"2018-05-29\",\r\n  \"statements\": [\r\n    \"DELETE FROM SERVICE_PROVIDER WHERE SERVICE_PROVIDER_ID = :SERVICE_PROVIDER_ID\"\r\n  ],\r\n  \"variableMap\": {\r\n    \":SERVICE_PROVIDER_ID\": $ctx.args.input.SERVICE_PROVIDER_ID\r\n  }\r\n}",
              "ResponseMappingTemplate": "$util.toJson($ctx.result.records[0])",
              "Kind": "UNIT",
              "DataSourceName": {
                "Fn::GetAtt": [
                  "GraphQlDsStageDataSource",
                  "Name"
                ]
              }
            }
          },
          "GraphQlResolverMutationcreateSERVICE": {
            "Type": "AWS::AppSync::Resolver",
            "DependsOn": "GraphQlSchema",
            "Properties": {
              "ApiId": {
                "Fn::GetAtt": [
                  "GraphQlApi",
                  "ApiId"
                ]
              },
              "TypeName": "Mutation",
              "FieldName": "createSERVICE",
              "RequestMappingTemplate": "{\r\n  \"version\": \"2018-05-29\",\r\n  \"statements\": [\r\n    \"INSERT INTO SERVICE (SERVICE_PROVIDER_ID, URI, SECRET_NAME, REQUEST_TYPE, CREATED_BY_USER_ID, CREATED_DATE) VALUES (:SERVICE_PROVIDER_ID, :URI, :SECRET_NAME, :REQUEST_TYPE, :CREATED_BY_USER_ID, :CREATED_DATE)\",\r\n    \"SELECT * FROM SERVICE WHERE SERVICE_ID = LAST_INSERT_ID()\"\r\n  ],\r\n  \"variableMap\": {\r\n    \":SERVICE_PROVIDER_ID\": $ctx.args.input.SERVICE_PROVIDER_ID,\r\n    \":URI\": \"$ctx.args.input.URI\",\r\n    \":SECRET_NAME\": #if($ctx.args.input.SECRET_NAME)\"$ctx.args.input.SECRET_NAME\"#else null #end,\r\n    \":REQUEST_TYPE\": #if($ctx.args.input.REQUEST_TYPE)\"$ctx.args.input.REQUEST_TYPE\"#else null #end,\r\n    \":CREATED_BY_USER_ID\": $ctx.args.input.CREATED_BY_USER_ID,\r\n    \":CREATED_DATE\": \"$ctx.args.input.CREATED_DATE\"\r\n  }\r\n}",
              "ResponseMappingTemplate": "{\r\n  \"SERVICE_ID\": -1,\r\n  \"SERVICE_PROVIDER_ID\": $ctx.args.input.SERVICE_PROVIDER_ID,\r\n  \"URI\": \"$ctx.args.input.URI\",\r\n  \"SECRET_NAME\": \"$ctx.args.input.SECRET_NAME\",\r\n  \"REQUEST_TYPE\": \"$ctx.args.input.REQUEST_TYPE\",\r\n  \"CREATED_BY_USER_ID\": $ctx.args.input.CREATED_BY_USER_ID,\r\n  \"CREATED_DATE\": \"$ctx.args.input.CREATED_DATE\"\r\n}",
              "Kind": "UNIT",
              "DataSourceName": {
                "Fn::GetAtt": [
                  "GraphQlDsStageDataSource",
                  "Name"
                ]
              }
            }
          },
          "GraphQlResolverMutationupdateSERVICE": {
            "Type": "AWS::AppSync::Resolver",
            "DependsOn": "GraphQlSchema",
            "Properties": {
              "ApiId": {
                "Fn::GetAtt": [
                  "GraphQlApi",
                  "ApiId"
                ]
              },
              "TypeName": "Mutation",
              "FieldName": "updateSERVICE",
              "RequestMappingTemplate": "{\r\n  \"version\": \"2018-05-29\",\r\n  \"statements\": [\r\n    \"UPDATE SERVICE SET SERVICE_PROVIDER_ID = :SERVICE_PROVIDER_ID, URI = :URI, SECRET_NAME = :SECRET_NAME, REQUEST_TYPE = :REQUEST_TYPE, CHANGED_BY_USER_ID = :CHANGED_BY_USER_ID, CHANGED_DATE = :CHANGED_DATE WHERE SERVICE_ID = :SERVICE_ID\",\r\n    \"SELECT * FROM SERVICE WHERE SERVICE_ID = :SERVICE_ID\"\r\n  ],\r\n  \"variableMap\": {\r\n    \":SERVICE_ID\": $ctx.args.input.SERVICE_ID,\r\n    \":SERVICE_PROVIDER_ID\": $ctx.args.input.SERVICE_PROVIDER_ID,\r\n    \":URI\": \"$ctx.args.input.URI\",\r\n    \":SECRET_NAME\": #if($ctx.args.input.SECRET_NAME)\"$ctx.args.input.SECRET_NAME\"#else null #end,\r\n    \":REQUEST_TYPE\": #if($ctx.args.input.REQUEST_TYPE)\"$ctx.args.input.REQUEST_TYPE\"#else null #end,\r\n    \":CHANGED_BY_USER_ID\": $ctx.args.input.CHANGED_BY_USER_ID,\r\n    \":CHANGED_DATE\": \"$ctx.args.input.CHANGED_DATE\"\r\n  }\r\n}",
              "ResponseMappingTemplate": "$util.toJson($ctx.result.records[0])",
              "Kind": "UNIT",
              "DataSourceName": {
                "Fn::GetAtt": [
                  "GraphQlDsStageDataSource",
                  "Name"
                ]
              }
            }
          },
          "GraphQlResolverMutationdeleteSERVICE": {
            "Type": "AWS::AppSync::Resolver",
            "DependsOn": "GraphQlSchema",
            "Properties": {
              "ApiId": {
                "Fn::GetAtt": [
                  "GraphQlApi",
                  "ApiId"
                ]
              },
              "TypeName": "Mutation",
              "FieldName": "deleteSERVICE",
              "RequestMappingTemplate": "{\r\n  \"version\": \"2018-05-29\",\r\n  \"statements\": [\r\n    \"DELETE FROM SERVICE WHERE SERVICE_ID = :SERVICE_ID\"\r\n  ],\r\n  \"variableMap\": {\r\n    \":SERVICE_ID\": $util.toJson($ctx.args.input.SERVICE_ID)\r\n  }\r\n}",
              "ResponseMappingTemplate": "{\r\n  \"SERVICE_ID\": $ctx.args.input.SERVICE_ID,\r\n  \"SERVICE_PROVIDER_ID\": 1,\r\n  \"URI\": \"deleted\",\r\n  \"CREATED_BY_USER_ID\": 1,\r\n  \"CREATED_DATE\": \"$util.time.nowISO8601()\"\r\n}",
              "Kind": "UNIT",
              "DataSourceName": {
                "Fn::GetAtt": [
                  "GraphQlDsStageDataSource",
                  "Name"
                ]
              }
            }
          },
          "GraphQlResolverMutationcreateSERVICEPARAM": {
            "Type": "AWS::AppSync::Resolver",
            "DependsOn": "GraphQlSchema",
            "Properties": {
              "ApiId": {
                "Fn::GetAtt": [
                  "GraphQlApi",
                  "ApiId"
                ]
              },
              "TypeName": "Mutation",
              "FieldName": "createSERVICE_PARAM",
              "RequestMappingTemplate": "{\r\n  \"version\": \"2018-05-29\",\r\n  \"statements\": [\r\n    \"INSERT INTO SERVICE_PARAM (SERVICE_ID, PARAM_NAME, CREATED_BY_USER_ID, CREATED_DATE) VALUES (:SERVICE_ID, :PARAM_NAME, :CREATED_BY_USER_ID, :CREATED_DATE)\"\r\n  ],\r\n  \"variableMap\": {\r\n    \":SERVICE_ID\": $ctx.args.input.SERVICE_ID,\r\n    \":PARAM_NAME\": \"$ctx.args.input.PARAM_NAME\",\r\n    \":CREATED_BY_USER_ID\": $ctx.args.input.CREATED_BY_USER_ID,\r\n    \":CREATED_DATE\": \"$ctx.args.input.CREATED_DATE\"\r\n  }\r\n}",
              "ResponseMappingTemplate": "#if($ctx.result.generatedKeys && $ctx.result.generatedKeys.size() > 0)\r\n  #set($generatedId = $ctx.result.generatedKeys[0])\r\n#else\r\n  #set($generatedId = -1)\r\n#end\r\n\r\n{\r\n  \"SERVICE_PARAM_ID\": $generatedId,\r\n  \"SERVICE_ID\": $ctx.args.input.SERVICE_ID,\r\n  \"PARAM_NAME\": \"$ctx.args.input.PARAM_NAME\",\r\n  \"CREATED_BY_USER_ID\": $ctx.args.input.CREATED_BY_USER_ID,\r\n  \"CREATED_DATE\": \"$ctx.args.input.CREATED_DATE\"\r\n}",
              "Kind": "UNIT",
              "DataSourceName": {
                "Fn::GetAtt": [
                  "GraphQlDsStageDataSource",
                  "Name"
                ]
              }
            }
          },
          "GraphQlResolverMutationupdateSERVICEPARAM": {
            "Type": "AWS::AppSync::Resolver",
            "DependsOn": "GraphQlSchema",
            "Properties": {
              "ApiId": {
                "Fn::GetAtt": [
                  "GraphQlApi",
                  "ApiId"
                ]
              },
              "TypeName": "Mutation",
              "FieldName": "updateSERVICE_PARAM",
              "RequestMappingTemplate": "{\r\n  \"version\": \"2018-05-29\",\r\n  \"statements\": [\r\n    \"UPDATE SERVICE_PARAM SET PARAM_NAME = :PARAM_NAME, CHANGED_BY_USER_ID = :CHANGED_BY_USER_ID, CHANGED_DATE = :CHANGED_DATE WHERE SERVICE_PARAM_ID = :SERVICE_PARAM_ID\",\r\n    \"SELECT * FROM SERVICE_PARAM WHERE SERVICE_PARAM_ID = :SERVICE_PARAM_ID\"\r\n  ],\r\n  \"variableMap\": {\r\n    \":SERVICE_PARAM_ID\": $ctx.args.input.SERVICE_PARAM_ID,\r\n    \":PARAM_NAME\": \"$ctx.args.input.PARAM_NAME\",\r\n    \":CHANGED_BY_USER_ID\": $ctx.args.input.CHANGED_BY_USER_ID,\r\n    \":CHANGED_DATE\": \"$ctx.args.input.CHANGED_DATE\"\r\n  }\r\n}",
              "ResponseMappingTemplate": "$util.toJson($ctx.result.records[0])",
              "Kind": "UNIT",
              "DataSourceName": {
                "Fn::GetAtt": [
                  "GraphQlDsStageDataSource",
                  "Name"
                ]
              }
            }
          },
          "GraphQlResolverMutationdeleteSERVICEPARAM": {
            "Type": "AWS::AppSync::Resolver",
            "DependsOn": "GraphQlSchema",
            "Properties": {
              "ApiId": {
                "Fn::GetAtt": [
                  "GraphQlApi",
                  "ApiId"
                ]
              },
              "TypeName": "Mutation",
              "FieldName": "deleteSERVICE_PARAM",
              "RequestMappingTemplate": "{\r\n  \"version\": \"2018-05-29\",\r\n  \"statements\": [\r\n    \"DELETE FROM SERVICE_PARAM WHERE SERVICE_PARAM_ID = :SERVICE_PARAM_ID\"\r\n  ],\r\n  \"variableMap\": {\r\n    \":SERVICE_PARAM_ID\": $ctx.args.input.SERVICE_PARAM_ID\r\n  }\r\n}",
              "ResponseMappingTemplate": "$util.toJson($ctx.result.records[0])",
              "Kind": "UNIT",
              "DataSourceName": {
                "Fn::GetAtt": [
                  "GraphQlDsStageDataSource",
                  "Name"
                ]
              }
            }
          },
          "GraphQlResolverMutationcreateSERVICEPARAMMAPPING": {
            "Type": "AWS::AppSync::Resolver",
            "DependsOn": "GraphQlSchema",
            "Properties": {
              "ApiId": {
                "Fn::GetAtt": [
                  "GraphQlApi",
                  "ApiId"
                ]
              },
              "TypeName": "Mutation",
              "FieldName": "createSERVICE_PARAM_MAPPING",
              "RequestMappingTemplate": "{\r\n  \"version\": \"2018-05-29\",\r\n  \"statements\": [\r\n    \"INSERT INTO SERVICE_PARAM_MAPPING (ORIGIN_PRODUCT_ID, SYSTEM_NBR, PRIN_NBR, AGENT_NBR, SOURCE_SERVICE_PARAM_ID, TARGET_SERVICE_PARAM_ID, PLASTIC_TYPE_ID, COMMENT_TEXT, CREATED_BY_USER_ID, CREATED_DATE) VALUES (:ORIGIN_PRODUCT_ID, :SYSTEM_NBR, :PRIN_NBR, :AGENT_NBR, :SOURCE_SERVICE_PARAM_ID, :TARGET_SERVICE_PARAM_ID, :PLASTIC_TYPE_ID, :COMMENT_TEXT, :CREATED_BY_USER_ID, :CREATED_DATE)\"\r\n  ],\r\n  \"variableMap\": {\r\n    \":ORIGIN_PRODUCT_ID\": $ctx.args.input.ORIGIN_PRODUCT_ID,\r\n    \":SYSTEM_NBR\": #if($ctx.args.input.SYSTEM_NBR)\"$ctx.args.input.SYSTEM_NBR\"#else null #end,\r\n    \":PRIN_NBR\": #if($ctx.args.input.PRIN_NBR)\"$ctx.args.input.PRIN_NBR\"#else null #end,\r\n    \":AGENT_NBR\": #if($ctx.args.input.AGENT_NBR)\"$ctx.args.input.AGENT_NBR\"#else null #end,\r\n    \":SOURCE_SERVICE_PARAM_ID\": $ctx.args.input.SOURCE_SERVICE_PARAM_ID,\r\n    \":TARGET_SERVICE_PARAM_ID\": $ctx.args.input.TARGET_SERVICE_PARAM_ID,\r\n    \":PLASTIC_TYPE_ID\": #if($ctx.args.input.PLASTIC_TYPE_ID)$ctx.args.input.PLASTIC_TYPE_ID#else null #end,\r\n    \":COMMENT_TEXT\": #if($ctx.args.input.COMMENT_TEXT)\"$ctx.args.input.COMMENT_TEXT\"#else null #end,\r\n    \":CREATED_BY_USER_ID\": $ctx.args.input.CREATED_BY_USER_ID,\r\n    \":CREATED_DATE\": \"$ctx.args.input.CREATED_DATE\"\r\n  }\r\n}",
              "ResponseMappingTemplate": "{\r\n  \"SERVICE_PARAM_MAPPING_ID\": -1,\r\n  \"ORIGIN_PRODUCT_ID\": $ctx.args.input.ORIGIN_PRODUCT_ID,\r\n  \"SOURCE_SERVICE_PARAM_ID\": $ctx.args.input.SOURCE_SERVICE_PARAM_ID,\r\n  \"TARGET_SERVICE_PARAM_ID\": $ctx.args.input.TARGET_SERVICE_PARAM_ID,\r\n  \"SYSTEM_NBR\": \"$ctx.args.input.SYSTEM_NBR\",\r\n  \"PRIN_NBR\": \"$ctx.args.input.PRIN_NBR\",\r\n  \"AGENT_NBR\": \"$ctx.args.input.AGENT_NBR\",\r\n  \"CREATED_BY_USER_ID\": $ctx.args.input.CREATED_BY_USER_ID,\r\n  \"CREATED_DATE\": \"$ctx.args.input.CREATED_DATE\"\r\n}",
              "Kind": "UNIT",
              "DataSourceName": {
                "Fn::GetAtt": [
                  "GraphQlDsStageDataSource",
                  "Name"
                ]
              }
            }
          },
          "GraphQlResolverMutationupdateSERVICEPARAMMAPPING": {
            "Type": "AWS::AppSync::Resolver",
            "DependsOn": "GraphQlSchema",
            "Properties": {
              "ApiId": {
                "Fn::GetAtt": [
                  "GraphQlApi",
                  "ApiId"
                ]
              },
              "TypeName": "Mutation",
              "FieldName": "updateSERVICE_PARAM_MAPPING",
              "RequestMappingTemplate": "{\r\n  \"version\": \"2018-05-29\",\r\n  \"statements\": [\r\n    \"UPDATE SERVICE_PARAM_MAPPING SET ORIGIN_PRODUCT_ID = :ORIGIN_PRODUCT_ID, SYSTEM_NBR = :SYSTEM_NBR, PRIN_NBR = :PRIN_NBR, AGENT_NBR = :AGENT_NBR, SOURCE_SERVICE_PARAM_ID = :SOURCE_SERVICE_PARAM_ID, TARGET_SERVICE_PARAM_ID = :TARGET_SERVICE_PARAM_ID, PLASTIC_TYPE_ID = :PLASTIC_TYPE_ID, COMMENT_TEXT = :COMMENT_TEXT, CHANGED_BY_USER_ID = :CHANGED_BY_USER_ID, CHANGED_DATE = :CHANGED_DATE WHERE SERVICE_PARAM_MAPPING_ID = :SERVICE_PARAM_MAPPING_ID\",\r\n    \"SELECT * FROM SERVICE_PARAM_MAPPING WHERE SERVICE_PARAM_MAPPING_ID = :SERVICE_PARAM_MAPPING_ID\"\r\n  ],\r\n  \"variableMap\": {\r\n    \":SERVICE_PARAM_MAPPING_ID\": $ctx.args.input.SERVICE_PARAM_MAPPING_ID,\r\n    \":ORIGIN_PRODUCT_ID\": $ctx.args.input.ORIGIN_PRODUCT_ID,\r\n    \":SYSTEM_NBR\": #if($ctx.args.input.SYSTEM_NBR)\"$ctx.args.input.SYSTEM_NBR\"#else null #end,\r\n    \":PRIN_NBR\": #if($ctx.args.input.PRIN_NBR)\"$ctx.args.input.PRIN_NBR\"#else null #end,\r\n    \":AGENT_NBR\": #if($ctx.args.input.AGENT_NBR)\"$ctx.args.input.AGENT_NBR\"#else null #end,\r\n    \":SOURCE_SERVICE_PARAM_ID\": $ctx.args.input.SOURCE_SERVICE_PARAM_ID,\r\n    \":TARGET_SERVICE_PARAM_ID\": $ctx.args.input.TARGET_SERVICE_PARAM_ID,\r\n    \":PLASTIC_TYPE_ID\": #if($ctx.args.input.PLASTIC_TYPE_ID)$ctx.args.input.PLASTIC_TYPE_ID#else null #end,\r\n    \":COMMENT_TEXT\": #if($ctx.args.input.COMMENT_TEXT)\"$ctx.args.input.COMMENT_TEXT\"#else null #end,\r\n    \":CHANGED_BY_USER_ID\": $ctx.args.input.CHANGED_BY_USER_ID,\r\n    \":CHANGED_DATE\": \"$ctx.args.input.CHANGED_DATE\"\r\n  }\r\n}",
              "ResponseMappingTemplate": "$util.toJson($ctx.result.records[0])",
              "Kind": "UNIT",
              "DataSourceName": {
                "Fn::GetAtt": [
                  "GraphQlDsStageDataSource",
                  "Name"
                ]
              }
            }
          },
          "GraphQlResolverMutationdeleteSERVICEPARAMMAPPING": {
            "Type": "AWS::AppSync::Resolver",
            "DependsOn": "GraphQlSchema",
            "Properties": {
              "ApiId": {
                "Fn::GetAtt": [
                  "GraphQlApi",
                  "ApiId"
                ]
              },
              "TypeName": "Mutation",
              "FieldName": "deleteSERVICE_PARAM_MAPPING",
              "RequestMappingTemplate": "{\r\n  \"version\": \"2018-05-29\",\r\n  \"statements\": [\r\n    \"DELETE FROM SERVICE_PARAM_MAPPING WHERE SERVICE_PARAM_MAPPING_ID = :SERVICE_PARAM_MAPPING_ID\"\r\n  ],\r\n  \"variableMap\": {\r\n    \":SERVICE_PARAM_MAPPING_ID\": $ctx.args.input.SERVICE_PARAM_MAPPING_ID\r\n  }\r\n}",
              "ResponseMappingTemplate": "{\r\n  \"SERVICE_PARAM_MAPPING_ID\": $ctx.args.input.SERVICE_PARAM_MAPPING_ID\r\n}",
              "Kind": "UNIT",
              "DataSourceName": {
                "Fn::GetAtt": [
                  "GraphQlDsStageDataSource",
                  "Name"
                ]
              }
            }
          },
          "GraphQlResolverMutationcreateSERVICEEXPRMAPPING": {
            "Type": "AWS::AppSync::Resolver",
            "DependsOn": "GraphQlSchema",
            "Properties": {
              "ApiId": {
                "Fn::GetAtt": [
                  "GraphQlApi",
                  "ApiId"
                ]
              },
              "TypeName": "Mutation",
              "FieldName": "createSERVICE_EXPR_MAPPING",
              "RequestMappingTemplate": "{\r\n  \"version\": \"2018-05-29\",\r\n  \"statements\": [\r\n    \"INSERT INTO SERVICE_EXPR_MAPPING (SERVICE_PARAM_MAPPING_ID, SOURCE_EXPR, TARGET_EXPR, COMMENT_TEXT, CREATED_BY_USER_ID, CREATED_DATE) VALUES (:SERVICE_PARAM_MAPPING_ID, :SOURCE_EXPR, :TARGET_EXPR, :COMMENT_TEXT, :CREATED_BY_USER_ID, :CREATED_DATE)\",\r\n    \"SELECT * FROM SERVICE_EXPR_MAPPING WHERE SERVICE_EXPR_MAPPING_ID = LAST_INSERT_ID()\"\r\n  ],\r\n  \"variableMap\": {\r\n    \":SERVICE_PARAM_MAPPING_ID\": $ctx.args.input.SERVICE_PARAM_MAPPING_ID,\r\n    \":SOURCE_EXPR\": \"$ctx.args.input.SOURCE_EXPR\",\r\n    \":TARGET_EXPR\": \"$ctx.args.input.TARGET_EXPR\",\r\n    \":COMMENT_TEXT\": #if($ctx.args.input.COMMENT_TEXT)\"$ctx.args.input.COMMENT_TEXT\"#else null #end,\r\n    \":CREATED_BY_USER_ID\": $ctx.args.input.CREATED_BY_USER_ID,\r\n    \":CREATED_DATE\": \"$ctx.args.input.CREATED_DATE\"\r\n  }\r\n}",
              "ResponseMappingTemplate": "$util.toJson($ctx.result.records[0])",
              "Kind": "UNIT",
              "DataSourceName": {
                "Fn::GetAtt": [
                  "GraphQlDsStageDataSource",
                  "Name"
                ]
              }
            }
          },
          "GraphQlResolverMutationupdateSERVICEEXPRMAPPING": {
            "Type": "AWS::AppSync::Resolver",
            "DependsOn": "GraphQlSchema",
            "Properties": {
              "ApiId": {
                "Fn::GetAtt": [
                  "GraphQlApi",
                  "ApiId"
                ]
              },
              "TypeName": "Mutation",
              "FieldName": "updateSERVICE_EXPR_MAPPING",
              "RequestMappingTemplate": "{\r\n  \"version\": \"2018-05-29\",\r\n  \"statements\": [\r\n    \"UPDATE SERVICE_EXPR_MAPPING SET SERVICE_PARAM_MAPPING_ID = :SERVICE_PARAM_MAPPING_ID, SOURCE_EXPR = :SOURCE_EXPR, TARGET_EXPR = :TARGET_EXPR, COMMENT_TEXT = :COMMENT_TEXT, CHANGED_BY_USER_ID = :CHANGED_BY_USER_ID, CHANGED_DATE = :CHANGED_DATE WHERE SERVICE_EXPR_MAPPING_ID = :SERVICE_EXPR_MAPPING_ID\",\r\n    \"SELECT * FROM SERVICE_EXPR_MAPPING WHERE SERVICE_EXPR_MAPPING_ID = :SERVICE_EXPR_MAPPING_ID\"\r\n  ],\r\n  \"variableMap\": {\r\n    \":SERVICE_EXPR_MAPPING_ID\": $ctx.args.input.SERVICE_EXPR_MAPPING_ID,\r\n    \":SERVICE_PARAM_MAPPING_ID\": $ctx.args.input.SERVICE_PARAM_MAPPING_ID,\r\n    \":SOURCE_EXPR\": \"$ctx.args.input.SOURCE_EXPR\",\r\n    \":TARGET_EXPR\": \"$ctx.args.input.TARGET_EXPR\",\r\n    \":COMMENT_TEXT\": #if($ctx.args.input.COMMENT_TEXT)\"$ctx.args.input.COMMENT_TEXT\"#else null #end,\r\n    \":CHANGED_BY_USER_ID\": $ctx.args.input.CHANGED_BY_USER_ID,\r\n    \":CHANGED_DATE\": \"$ctx.args.input.CHANGED_DATE\"\r\n  }\r\n}",
              "ResponseMappingTemplate": "$util.toJson($ctx.result.records[0])",
              "Kind": "UNIT",
              "DataSourceName": {
                "Fn::GetAtt": [
                  "GraphQlDsStageDataSource",
                  "Name"
                ]
              }
            }
          },
          "GraphQlResolverMutationdeleteSERVICEEXPRMAPPING": {
            "Type": "AWS::AppSync::Resolver",
            "DependsOn": "GraphQlSchema",
            "Properties": {
              "ApiId": {
                "Fn::GetAtt": [
                  "GraphQlApi",
                  "ApiId"
                ]
              },
              "TypeName": "Mutation",
              "FieldName": "deleteSERVICE_EXPR_MAPPING",
              "RequestMappingTemplate": "{\r\n  \"version\": \"2018-05-29\",\r\n  \"statements\": [\r\n    \"DELETE FROM SERVICE_EXPR_MAPPING WHERE SERVICE_EXPR_MAPPING_ID = :SERVICE_EXPR_MAPPING_ID\"\r\n  ],\r\n  \"variableMap\": {\r\n    \":SERVICE_EXPR_MAPPING_ID\": $ctx.args.input.SERVICE_EXPR_MAPPING_ID\r\n  }\r\n}",
              "ResponseMappingTemplate": "{\r\n  \"SERVICE_EXPR_MAPPING_ID\": $ctx.args.input.SERVICE_EXPR_MAPPING_ID\r\n}",
              "Kind": "UNIT",
              "DataSourceName": {
                "Fn::GetAtt": [
                  "GraphQlDsStageDataSource",
                  "Name"
                ]
              }
            }
          },
          "GraphQlResolverMutationcreateSTEPTYPE": {
            "Type": "AWS::AppSync::Resolver",
            "DependsOn": "GraphQlSchema",
            "Properties": {
              "ApiId": {
                "Fn::GetAtt": [
                  "GraphQlApi",
                  "ApiId"
                ]
              },
              "TypeName": "Mutation",
              "FieldName": "createSTEP_TYPE",
              "RequestMappingTemplate": "{\r\n  \"version\": \"2018-05-29\",\r\n  \"statements\": [\r\n    \"INSERT INTO STEP_TYPE (STEP_TYPE_NAME, STEP_TYPE_DESC, RESOURCE_NAME, CREATED_BY_USER_ID, CREATED_DATE) VALUES (:STEP_TYPE_NAME, :STEP_TYPE_DESC, :RESOURCE_NAME, :CREATED_BY_USER_ID, :CREATED_DATE)\",\r\n    \"SELECT * FROM STEP_TYPE WHERE STEP_TYPE_ID = LAST_INSERT_ID()\"\r\n  ],\r\n  \"variableMap\": {\r\n    \":STEP_TYPE_NAME\": \"$ctx.args.input.STEP_TYPE_NAME\",\r\n    \":STEP_TYPE_DESC\": #if($ctx.args.input.STEP_TYPE_DESC)\"$ctx.args.input.STEP_TYPE_DESC\"#else null #end,\r\n    \":RESOURCE_NAME\": #if($ctx.args.input.RESOURCE_NAME)\"$ctx.args.input.RESOURCE_NAME\"#else null #end,\r\n    \":CREATED_BY_USER_ID\": $ctx.args.input.CREATED_BY_USER_ID,\r\n    \":CREATED_DATE\": \"$ctx.args.input.CREATED_DATE\"\r\n  }\r\n}",
              "ResponseMappingTemplate": "$util.toJson($ctx.result.records[0])",
              "Kind": "UNIT",
              "DataSourceName": {
                "Fn::GetAtt": [
                  "GraphQlDsStageDataSource",
                  "Name"
                ]
              }
            }
          },
          "GraphQlResolverMutationupdateSTEPTYPE": {
            "Type": "AWS::AppSync::Resolver",
            "DependsOn": "GraphQlSchema",
            "Properties": {
              "ApiId": {
                "Fn::GetAtt": [
                  "GraphQlApi",
                  "ApiId"
                ]
              },
              "TypeName": "Mutation",
              "FieldName": "updateSTEP_TYPE",
              "RequestMappingTemplate": "{\r\n  \"version\": \"2018-05-29\",\r\n  \"statements\": [\r\n    \"UPDATE STEP_TYPE SET STEP_TYPE_NAME = :STEP_TYPE_NAME, STEP_TYPE_DESC = :STEP_TYPE_DESC, RESOURCE_NAME = :RESOURCE_NAME, CHANGED_BY_USER_ID = :CHANGED_BY_USER_ID, CHANGED_DATE = :CHANGED_DATE WHERE STEP_TYPE_ID = :STEP_TYPE_ID\",\r\n    \"SELECT * FROM STEP_TYPE WHERE STEP_TYPE_ID = :STEP_TYPE_ID\"\r\n  ],\r\n  \"variableMap\": {\r\n    \":STEP_TYPE_ID\": $ctx.args.input.STEP_TYPE_ID,\r\n    \":STEP_TYPE_NAME\": \"$ctx.args.input.STEP_TYPE_NAME\",\r\n    \":STEP_TYPE_DESC\": #if($ctx.args.input.STEP_TYPE_DESC)\"$ctx.args.input.STEP_TYPE_DESC\"#else null #end,\r\n    \":RESOURCE_NAME\": #if($ctx.args.input.RESOURCE_NAME)\"$ctx.args.input.RESOURCE_NAME\"#else null #end,\r\n    \":CHANGED_BY_USER_ID\": $ctx.args.input.CHANGED_BY_USER_ID,\r\n    \":CHANGED_DATE\": \"$ctx.args.input.CHANGED_DATE\"\r\n  }\r\n}",
              "ResponseMappingTemplate": "$util.toJson($ctx.result.records[0])",
              "Kind": "UNIT",
              "DataSourceName": {
                "Fn::GetAtt": [
                  "GraphQlDsStageDataSource",
                  "Name"
                ]
              }
            }
          },
          "GraphQlResolverMutationdeleteSTEPTYPE": {
            "Type": "AWS::AppSync::Resolver",
            "DependsOn": "GraphQlSchema",
            "Properties": {
              "ApiId": {
                "Fn::GetAtt": [
                  "GraphQlApi",
                  "ApiId"
                ]
              },
              "TypeName": "Mutation",
              "FieldName": "deleteSTEP_TYPE",
              "RequestMappingTemplate": "{\r\n  \"version\": \"2018-05-29\",\r\n  \"statements\": [\r\n    \"DELETE FROM STEP_TYPE WHERE STEP_TYPE_ID = :STEP_TYPE_ID\"\r\n  ],\r\n  \"variableMap\": {\r\n    \":STEP_TYPE_ID\": $ctx.args.input.STEP_TYPE_ID\r\n  }\r\n}",
              "ResponseMappingTemplate": "$util.toJson($ctx.result.records[0])",
              "Kind": "UNIT",
              "DataSourceName": {
                "Fn::GetAtt": [
                  "GraphQlDsStageDataSource",
                  "Name"
                ]
              }
            }
          },
          "GraphQlResolverMutationcreateSTEPSERVICEMAPPING": {
            "Type": "AWS::AppSync::Resolver",
            "DependsOn": "GraphQlSchema",
            "Properties": {
              "ApiId": {
                "Fn::GetAtt": [
                  "GraphQlApi",
                  "ApiId"
                ]
              },
              "TypeName": "Mutation",
              "FieldName": "createSTEP_SERVICE_MAPPING",
              "RequestMappingTemplate": "{\r\n  \"version\": \"2018-05-29\",\r\n  \"statements\": [\r\n    \"INSERT INTO STEP_SERVICE_MAPPING (STEP_TYPE_ID, SERVICE_ID, SEQUENCE_NBR) VALUES (:STEP_TYPE_ID, :SERVICE_ID, :SEQUENCE_NBR)\",\r\n    \"SELECT * FROM STEP_SERVICE_MAPPING WHERE STEP_SERVICE_MAPPING_ID = LAST_INSERT_ID()\"\r\n  ],\r\n  \"variableMap\": {\r\n    \":STEP_TYPE_ID\": $ctx.args.input.STEP_TYPE_ID,\r\n    \":SERVICE_ID\": $ctx.args.input.SERVICE_ID,\r\n    \":SEQUENCE_NBR\": $ctx.args.input.SEQUENCE_NBR\r\n  }\r\n}",
              "ResponseMappingTemplate": "$util.toJson($ctx.result.records[0])",
              "Kind": "UNIT",
              "DataSourceName": {
                "Fn::GetAtt": [
                  "GraphQlDsStageDataSource",
                  "Name"
                ]
              }
            }
          },
          "GraphQlResolverMutationupdateSTEPSERVICEMAPPING": {
            "Type": "AWS::AppSync::Resolver",
            "DependsOn": "GraphQlSchema",
            "Properties": {
              "ApiId": {
                "Fn::GetAtt": [
                  "GraphQlApi",
                  "ApiId"
                ]
              },
              "TypeName": "Mutation",
              "FieldName": "updateSTEP_SERVICE_MAPPING",
              "RequestMappingTemplate": "{\r\n  \"version\": \"2018-05-29\",\r\n  \"statements\": [\r\n    \"UPDATE STEP_SERVICE_MAPPING SET STEP_TYPE_ID = :STEP_TYPE_ID, SERVICE_ID = :SERVICE_ID, SEQUENCE_NBR = :SEQUENCE_NBR WHERE STEP_SERVICE_MAPPING_ID = :STEP_SERVICE_MAPPING_ID\",\r\n    \"SELECT * FROM STEP_SERVICE_MAPPING WHERE STEP_SERVICE_MAPPING_ID = :STEP_SERVICE_MAPPING_ID\"\r\n  ],\r\n  \"variableMap\": {\r\n    \":STEP_SERVICE_MAPPING_ID\": $ctx.args.input.STEP_SERVICE_MAPPING_ID,\r\n    \":STEP_TYPE_ID\": $ctx.args.input.STEP_TYPE_ID,\r\n    \":SERVICE_ID\": $ctx.args.input.SERVICE_ID,\r\n    \":SEQUENCE_NBR\": $ctx.args.input.SEQUENCE_NBR\r\n  }\r\n}",
              "ResponseMappingTemplate": "$util.toJson($ctx.result.records[0])",
              "Kind": "UNIT",
              "DataSourceName": {
                "Fn::GetAtt": [
                  "GraphQlDsStageDataSource",
                  "Name"
                ]
              }
            }
          },
          "GraphQlResolverMutationdeleteSTEPSERVICEMAPPING": {
            "Type": "AWS::AppSync::Resolver",
            "DependsOn": "GraphQlSchema",
            "Properties": {
              "ApiId": {
                "Fn::GetAtt": [
                  "GraphQlApi",
                  "ApiId"
                ]
              },
              "TypeName": "Mutation",
              "FieldName": "deleteSTEP_SERVICE_MAPPING",
              "RequestMappingTemplate": "{\r\n  \"version\": \"2018-05-29\",\r\n  \"statements\": [\r\n    \"DELETE FROM STEP_SERVICE_MAPPING WHERE STEP_SERVICE_MAPPING_ID = :STEP_SERVICE_MAPPING_ID\"\r\n  ],\r\n  \"variableMap\": {\r\n    \":STEP_SERVICE_MAPPING_ID\": $ctx.args.input.STEP_SERVICE_MAPPING_ID\r\n  }\r\n}",
              "ResponseMappingTemplate": "$util.toJson($ctx.result.records[0])",
              "Kind": "UNIT",
              "DataSourceName": {
                "Fn::GetAtt": [
                  "GraphQlDsStageDataSource",
                  "Name"
                ]
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": "hazel-mapping-serverless-deployment-bucket",
            "Export": {
              "Name": "sls-vue-appsync-api-live-ServerlessDeploymentBucketName"
            }
          },
          "GraphQlApiKeyDefault": {
            "Value": {
              "Fn::GetAtt": [
                "GraphQlApiKeyDefault",
                "ApiKey"
              ]
            }
          },
          "GraphQlApiId": {
            "Value": {
              "Fn::GetAtt": [
                "GraphQlApi",
                "ApiId"
              ]
            },
            "Export": {
              "Name": {
                "Fn::Sub": "${AWS::StackName}-GraphQlApiId"
              }
            }
          },
          "GraphQlApiUrl": {
            "Value": {
              "Fn::GetAtt": [
                "GraphQlApi",
                "GraphQLUrl"
              ]
            },
            "Export": {
              "Name": {
                "Fn::Sub": "${AWS::StackName}-GraphQlApiUrl"
              }
            }
          }
        }
      }
    },
    "custom": {
      "userPoolId": "us-east-2_iAtP0Uzh5",
      "stages": {
        "dev": {
          "enabled": true,
          "secretArn": "arn:aws:secretsmanager:us-east-2:794611117044:secret:rds!cluster-a11d98c5-d647-45a2-9978-f81be7aa3d60-iDsvX3",
          "databaseName": "hazel_mapping_dev",
          "clusterIdentifier": "hazel-mapping",
          "minCapacity": 1,
          "maxCapacity": 2
        },
        "test": {
          "enabled": true,
          "secretArn": "arn:aws:secretsmanager:us-east-2:794611117044:secret:rds!cluster-cb7e7e17-e3eb-4916-a783-a3fad3597623-NOkBYH",
          "databaseName": "hazel_mapping_test",
          "clusterIdentifier": "hazel-mapping-test",
          "minCapacity": 1,
          "maxCapacity": 4
        },
        "uat": {
          "enabled": true,
          "secretArn": "arn:aws:secretsmanager:us-east-2:794611117044:secret:rds!cluster-5caa7e9f-9f43-4073-ba7f-af959e3cf6bb-yn4rKu",
          "databaseName": "hazel_mapping_uat",
          "clusterIdentifier": "hazel-mapping-uat",
          "minCapacity": 1,
          "maxCapacity": 4
        },
        "live": {
          "enabled": true,
          "secretArn": "arn:aws:secretsmanager:us-east-2:794611117044:secret:rds!cluster-5975818b-f15c-4381-b0ba-1f281f97610d-GlpEdy",
          "databaseName": "hazel_mapping_live",
          "clusterIdentifier": "hazel-mapping-live",
          "minCapacity": 2,
          "maxCapacity": 8
        }
      },
      "stageConfig": {
        "enabled": true,
        "secretArn": "arn:aws:secretsmanager:us-east-2:794611117044:secret:rds!cluster-5975818b-f15c-4381-b0ba-1f281f97610d-GlpEdy",
        "databaseName": "hazel_mapping_live",
        "clusterIdentifier": "hazel-mapping-live",
        "minCapacity": 2,
        "maxCapacity": 8
      },
      "appSync": {
        "name": "vue-appsync-api-live",
        "authenticationType": "AMAZON_COGNITO_USER_POOLS",
        "userPoolConfig": {
          "userPoolId": "us-east-2_iAtP0Uzh5",
          "defaultAction": "ALLOW"
        },
        "additionalAuthenticationProviders": [
          {
            "authenticationType": "API_KEY",
            "apiKeyConfig": {
              "apiKeyExpirationDays": 30
            }
          }
        ],
        "schema": "schema.graphql",
        "logging": {
          "level": "ALL",
          "roleArn": {
            "Fn::GetAtt": [
              "AppSyncLoggingRole",
              "Arn"
            ]
          }
        },
        "dataSources": [
          {
            "type": "RELATIONAL_DATABASE",
            "name": "StageDataSource",
            "config": {
              "dbClusterIdentifier": "hazel-mapping-live",
              "databaseName": "hazel_mapping_live",
              "awsSecretStoreArn": "arn:aws:secretsmanager:us-east-2:794611117044:secret:rds!cluster-5975818b-f15c-4381-b0ba-1f281f97610d-GlpEdy",
              "serviceRoleArn": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"GraphQlDsStageDataSource\"][\"Properties\"][\"ServiceRoleArn\"]"
              }
            }
          }
        ],
        "mappingTemplates": [
          {
            "dataSource": "StageDataSource",
            "type": "Query",
            "field": "listCONFIG_PARAMS",
            "request": "Query.listCONFIG_PARAMS.request.vtl",
            "response": "Query.listCONFIG_PARAMS.response.vtl"
          },
          {
            "dataSource": "StageDataSource",
            "type": "Query",
            "field": "listLOAN_APPS",
            "request": "Query.listLOAN_APPS.request.vtl",
            "response": "Query.listLOAN_APPS.response.vtl"
          },
          {
            "dataSource": "StageDataSource",
            "type": "Query",
            "field": "listNEW_MEMBER_TOKENS",
            "request": "Query.listNEW_MEMBER_TOKENS.request.vtl",
            "response": "Query.listNEW_MEMBER_TOKENS.response.vtl"
          },
          {
            "dataSource": "StageDataSource",
            "type": "Query",
            "field": "listORIGIN_PRODUCTS",
            "request": "Query.listORIGIN_PRODUCTS.request.vtl",
            "response": "Query.listORIGIN_PRODUCTS.response.vtl"
          },
          {
            "dataSource": "StageDataSource",
            "type": "Query",
            "field": "listSERVICE_PROVIDERS",
            "request": "Query.listSERVICE_PROVIDERS.request.vtl",
            "response": "Query.listSERVICE_PROVIDERS.response.vtl"
          },
          {
            "dataSource": "StageDataSource",
            "type": "Query",
            "field": "listSERVICES",
            "request": "Query.listSERVICES.request.vtl",
            "response": "Query.listSERVICES.response.vtl"
          },
          {
            "dataSource": "StageDataSource",
            "type": "Query",
            "field": "listREDIRECT_URLS",
            "request": "Query.listREDIRECT_URLS.request.vtl",
            "response": "Query.listREDIRECT_URLS.response.vtl"
          },
          {
            "dataSource": "StageDataSource",
            "type": "Query",
            "field": "listSERVICE_PARAMS",
            "request": "Query.listSERVICE_PARAMS.request.vtl",
            "response": "Query.listSERVICE_PARAMS.response.vtl"
          },
          {
            "dataSource": "StageDataSource",
            "type": "Query",
            "field": "listSERVICE_PARAM_MAPPINGS",
            "request": "Query.listSERVICE_PARAM_MAPPINGS.request.vtl",
            "response": "Query.listSERVICE_PARAM_MAPPINGS.response.vtl"
          },
          {
            "dataSource": "StageDataSource",
            "type": "Query",
            "field": "listSTEP_TYPES",
            "request": "Query.listSTEP_TYPES.request.vtl",
            "response": "Query.listSTEP_TYPES.response.vtl"
          },
          {
            "dataSource": "StageDataSource",
            "type": "Query",
            "field": "listSTEP_SERVICE_MAPPINGS",
            "request": "Query.listSTEP_SERVICE_MAPPINGS.request.vtl",
            "response": "Query.listSTEP_SERVICE_MAPPINGS.response.vtl"
          },
          {
            "dataSource": "StageDataSource",
            "type": "Query",
            "field": "listSERVICE_EXPR_MAPPINGS",
            "request": "Query.listSERVICE_EXPR_MAPPINGS.request.vtl",
            "response": "Query.listSERVICE_EXPR_MAPPINGS.response.vtl"
          },
          {
            "dataSource": "StageDataSource",
            "type": "Mutation",
            "field": "createORIGIN_PRODUCT",
            "request": "Mutation.createORIGIN_PRODUCT.request.vtl",
            "response": "Mutation.createORIGIN_PRODUCT.response.vtl"
          },
          {
            "dataSource": "StageDataSource",
            "type": "Mutation",
            "field": "updateORIGIN_PRODUCT",
            "request": "Mutation.updateORIGIN_PRODUCT.request.vtl",
            "response": "Mutation.updateORIGIN_PRODUCT.response.vtl"
          },
          {
            "dataSource": "StageDataSource",
            "type": "Mutation",
            "field": "deleteORIGIN_PRODUCT",
            "request": "Mutation.deleteORIGIN_PRODUCT.request.vtl",
            "response": "Mutation.deleteORIGIN_PRODUCT.response.vtl"
          },
          {
            "dataSource": "StageDataSource",
            "type": "Mutation",
            "field": "createREDIRECT_URL",
            "request": "Mutation.createREDIRECT_URL.request.vtl",
            "response": "Mutation.createREDIRECT_URL.response.vtl"
          },
          {
            "dataSource": "StageDataSource",
            "type": "Mutation",
            "field": "updateREDIRECT_URL",
            "request": "Mutation.updateREDIRECT_URL.request.vtl",
            "response": "Mutation.updateREDIRECT_URL.response.vtl"
          },
          {
            "dataSource": "StageDataSource",
            "type": "Mutation",
            "field": "deleteREDIRECT_URL",
            "request": "Mutation.deleteREDIRECT_URL.request.vtl",
            "response": "Mutation.deleteREDIRECT_URL.response.vtl"
          },
          {
            "dataSource": "StageDataSource",
            "type": "Mutation",
            "field": "createSERVICE_PROVIDER",
            "request": "Mutation.createSERVICE_PROVIDER.request.vtl",
            "response": "Mutation.createSERVICE_PROVIDER.response.vtl"
          },
          {
            "dataSource": "StageDataSource",
            "type": "Mutation",
            "field": "updateSERVICE_PROVIDER",
            "request": "Mutation.updateSERVICE_PROVIDER.request.vtl",
            "response": "Mutation.updateSERVICE_PROVIDER.response.vtl"
          },
          {
            "dataSource": "StageDataSource",
            "type": "Mutation",
            "field": "deleteSERVICE_PROVIDER",
            "request": "Mutation.deleteSERVICE_PROVIDER.request.vtl",
            "response": "Mutation.deleteSERVICE_PROVIDER.response.vtl"
          },
          {
            "dataSource": "StageDataSource",
            "type": "Mutation",
            "field": "createSERVICE",
            "request": "Mutation.createSERVICE.request.vtl",
            "response": "Mutation.createSERVICE.response.vtl"
          },
          {
            "dataSource": "StageDataSource",
            "type": "Mutation",
            "field": "updateSERVICE",
            "request": "Mutation.updateSERVICE.request.vtl",
            "response": "Mutation.updateSERVICE.response.vtl"
          },
          {
            "dataSource": "StageDataSource",
            "type": "Mutation",
            "field": "deleteSERVICE",
            "request": "Mutation.deleteSERVICE.request.vtl",
            "response": "Mutation.deleteSERVICE.response.vtl"
          },
          {
            "dataSource": "StageDataSource",
            "type": "Mutation",
            "field": "createSERVICE_PARAM",
            "request": "Mutation.createSERVICE_PARAM.request.vtl",
            "response": "Mutation.createSERVICE_PARAM.response.vtl"
          },
          {
            "dataSource": "StageDataSource",
            "type": "Mutation",
            "field": "updateSERVICE_PARAM",
            "request": "Mutation.updateSERVICE_PARAM.request.vtl",
            "response": "Mutation.updateSERVICE_PARAM.response.vtl"
          },
          {
            "dataSource": "StageDataSource",
            "type": "Mutation",
            "field": "deleteSERVICE_PARAM",
            "request": "Mutation.deleteSERVICE_PARAM.request.vtl",
            "response": "Mutation.deleteSERVICE_PARAM.response.vtl"
          },
          {
            "dataSource": "StageDataSource",
            "type": "Mutation",
            "field": "createSERVICE_PARAM_MAPPING",
            "request": "Mutation.createSERVICE_PARAM_MAPPING.request.vtl",
            "response": "Mutation.createSERVICE_PARAM_MAPPING.response.vtl"
          },
          {
            "dataSource": "StageDataSource",
            "type": "Mutation",
            "field": "updateSERVICE_PARAM_MAPPING",
            "request": "Mutation.updateSERVICE_PARAM_MAPPING.request.vtl",
            "response": "Mutation.updateSERVICE_PARAM_MAPPING.response.vtl"
          },
          {
            "dataSource": "StageDataSource",
            "type": "Mutation",
            "field": "deleteSERVICE_PARAM_MAPPING",
            "request": "Mutation.deleteSERVICE_PARAM_MAPPING.request.vtl",
            "response": "Mutation.deleteSERVICE_PARAM_MAPPING.response.vtl"
          },
          {
            "dataSource": "StageDataSource",
            "type": "Mutation",
            "field": "createSERVICE_EXPR_MAPPING",
            "request": "Mutation.createSERVICE_EXPR_MAPPING.request.vtl",
            "response": "Mutation.createSERVICE_EXPR_MAPPING.response.vtl"
          },
          {
            "dataSource": "StageDataSource",
            "type": "Mutation",
            "field": "updateSERVICE_EXPR_MAPPING",
            "request": "Mutation.updateSERVICE_EXPR_MAPPING.request.vtl",
            "response": "Mutation.updateSERVICE_EXPR_MAPPING.response.vtl"
          },
          {
            "dataSource": "StageDataSource",
            "type": "Mutation",
            "field": "deleteSERVICE_EXPR_MAPPING",
            "request": "Mutation.deleteSERVICE_EXPR_MAPPING.request.vtl",
            "response": "Mutation.deleteSERVICE_EXPR_MAPPING.response.vtl"
          },
          {
            "dataSource": "StageDataSource",
            "type": "Mutation",
            "field": "createSTEP_TYPE",
            "request": "Mutation.createSTEP_TYPE.request.vtl",
            "response": "Mutation.createSTEP_TYPE.response.vtl"
          },
          {
            "dataSource": "StageDataSource",
            "type": "Mutation",
            "field": "updateSTEP_TYPE",
            "request": "Mutation.updateSTEP_TYPE.request.vtl",
            "response": "Mutation.updateSTEP_TYPE.response.vtl"
          },
          {
            "dataSource": "StageDataSource",
            "type": "Mutation",
            "field": "deleteSTEP_TYPE",
            "request": "Mutation.deleteSTEP_TYPE.request.vtl",
            "response": "Mutation.deleteSTEP_TYPE.response.vtl"
          },
          {
            "dataSource": "StageDataSource",
            "type": "Mutation",
            "field": "createSTEP_SERVICE_MAPPING",
            "request": "Mutation.createSTEP_SERVICE_MAPPING.request.vtl",
            "response": "Mutation.createSTEP_SERVICE_MAPPING.response.vtl"
          },
          {
            "dataSource": "StageDataSource",
            "type": "Mutation",
            "field": "updateSTEP_SERVICE_MAPPING",
            "request": "Mutation.updateSTEP_SERVICE_MAPPING.request.vtl",
            "response": "Mutation.updateSTEP_SERVICE_MAPPING.response.vtl"
          },
          {
            "dataSource": "StageDataSource",
            "type": "Mutation",
            "field": "deleteSTEP_SERVICE_MAPPING",
            "request": "Mutation.deleteSTEP_SERVICE_MAPPING.request.vtl",
            "response": "Mutation.deleteSTEP_SERVICE_MAPPING.response.vtl"
          }
        ]
      }
    },
    "plugins": [
      "serverless-appsync-plugin"
    ],
    "pluginsData": {},
    "functions": {},
    "resources": {
      "Resources": {
        "EmailDomainValidationFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "FunctionName": "email-domain-validation-live",
            "Runtime": "nodejs18.x",
            "Handler": "index.handler",
            "Code": {
              "ZipFile": "exports.handler = async (event) => {\n  const email = event.request.userAttributes.email;\n  \n  // Input validation\n  if (!email || typeof email !== 'string') {\n    throw new Error('Invalid email format');\n  }\n  \n  var emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n  if (!emailRegex.test(email)) {\n    throw new Error('Invalid email format');\n  }\n  \n  if (!email.endsWith('@velera.com')) {\n    throw new Error('Only @velera.com email addresses are allowed');\n  }\n  \n  console.log('Email validation passed for domain: ' + email.split('@')[1]);\n  return event;\n};\n"
            },
            "Role": {
              "Fn::GetAtt": [
                "LambdaExecutionRole",
                "Arn"
              ]
            }
          }
        },
        "PostConfirmationFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "FunctionName": "post-confirmation-live",
            "Runtime": "nodejs18.x",
            "Handler": "index.handler",
            "Code": {
              "ZipFile": "const { CognitoIdentityProviderClient, AdminAddUserToGroupCommand, ListUsersInGroupCommand } = require('@aws-sdk/client-cognito-identity-provider');\nconst { SESClient, SendEmailCommand } = require('@aws-sdk/client-ses');\n\nconst cognito = new CognitoIdentityProviderClient({ region: 'us-east-2' });\nconst ses = new SESClient({ region: 'us-east-2' });\n\nexports.handler = async (event) => {\n  const { userPoolId, userName } = event;\n  const userAttributes = event.request.userAttributes;\n  const region = process.env.AWS_REGION;\n  \n  // Input validation\n  if (!userAttributes.email || !userAttributes.email.includes('@')) {\n    console.error('Invalid email format');\n    return event;\n  }\n  \n  try {\n    // Add user to ReadOnly group by default\n    await cognito.send(new AdminAddUserToGroupCommand({\n      GroupName: 'readonly',\n      UserPoolId: userPoolId,\n      Username: userName\n    }));\n    \n    console.log('User ' + userName + ' added to readonly group');\n    \n    // Send notification to admins about new user\n    const adminUsers = await cognito.send(new ListUsersInGroupCommand({\n      GroupName: 'admin',\n      UserPoolId: userPoolId\n    }));\n    \n    const adminEmails = adminUsers.Users.map(user => \n      user.Attributes.find(attr => attr.Name === 'email')?.Value\n    ).filter(email => email && email.includes('@'));\n    \n    console.log('Admin emails found:', JSON.stringify(adminEmails));\n    \n    if (adminEmails.length > 0) {\n      const emailParams = {\n        Source: 'eshubkagel@velera.com',\n        Destination: { ToAddresses: adminEmails },\n        Message: {\n          Subject: { Data: 'New User Registration: ' + userAttributes.email.split('@')[0] + '@*** (' + (userAttributes.name || 'Unknown') + ')' },\n          Body: {\n            Text: {\n              Data: 'New user has registered and been added to readonly group.\\n\\nUser Details:\\n- Email: ' + userAttributes.email + '\\n- Username: ' + userName + '\\n- ' + (userAttributes.name || 'Requested Access: Unknown') + '\\n\\nTo add user to requested group:\\nhttps://us-east-2.console.aws.amazon.com/cognito/v2/idp/user-pools/' + userPoolId + '/user-management/groups/details/' + (userAttributes.name ? userAttributes.name.replace('Requested: ', '').toLowerCase() : 'developer') + '/add-user?region=' + region\n            }\n          }\n        }\n      };\n      \n      console.log('Sending email TO:', JSON.stringify(adminEmails));\n      const result = await ses.send(new SendEmailCommand(emailParams));\n      console.log('SES Response:', JSON.stringify(result));\n      console.log('Notification sent to ' + adminEmails.length + ' admins');\n    }\n  } catch (error) {\n    console.error('Error in post-confirmation:', error.message);\n    console.error('Full error:', JSON.stringify(error));\n  }\n  \n  return event;\n};\n"
            },
            "Role": {
              "Fn::GetAtt": [
                "PostConfirmationLambdaRole",
                "Arn"
              ]
            }
          }
        },
        "PostConfirmationLambdaRole": {
          "Type": "AWS::IAM::Role",
          "Properties": {
            "AssumeRolePolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Principal": {
                    "Service": "lambda.amazonaws.com"
                  },
                  "Action": "sts:AssumeRole"
                }
              ]
            },
            "ManagedPolicyArns": [
              "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
            ],
            "Policies": [
              {
                "PolicyName": "CognitoGroupManagement",
                "PolicyDocument": {
                  "Version": "2012-10-17",
                  "Statement": [
                    {
                      "Effect": "Allow",
                      "Action": [
                        "cognito-idp:AdminAddUserToGroup",
                        "cognito-idp:ListUsersInGroup"
                      ],
                      "Resource": "arn:aws:cognito-idp:us-east-2:794611117044:userpool/us-east-2_iAtP0Uzh5"
                    },
                    {
                      "Effect": "Allow",
                      "Action": [
                        "ses:SendEmail"
                      ],
                      "Resource": [
                        "arn:aws:ses:us-east-2:*:identity/eshubkagel@velera.com"
                      ]
                    }
                  ]
                }
              }
            ]
          }
        },
        "PostConfirmationLambdaPermission": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Ref": "PostConfirmationFunction"
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "cognito-idp.amazonaws.com",
            "SourceArn": "arn:aws:cognito-idp:us-east-2:794611117044:userpool/us-east-2_iAtP0Uzh5"
          }
        },
        "LambdaExecutionRole": {
          "Type": "AWS::IAM::Role",
          "Properties": {
            "AssumeRolePolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Principal": {
                    "Service": "lambda.amazonaws.com"
                  },
                  "Action": "sts:AssumeRole"
                }
              ]
            },
            "ManagedPolicyArns": [
              "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
            ]
          }
        },
        "CognitoLambdaPermission": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Ref": "EmailDomainValidationFunction"
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "cognito-idp.amazonaws.com",
            "SourceArn": "arn:aws:cognito-idp:us-east-2:794611117044:userpool/us-east-2_iAtP0Uzh5"
          }
        },
        "AppSyncLoggingRole": {
          "Type": "AWS::IAM::Role",
          "Properties": {
            "AssumeRolePolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Principal": {
                    "Service": "appsync.amazonaws.com"
                  },
                  "Action": "sts:AssumeRole"
                }
              ]
            },
            "Policies": [
              {
                "PolicyName": "CloudWatchLogsAccess",
                "PolicyDocument": {
                  "Version": "2012-10-17",
                  "Statement": [
                    {
                      "Effect": "Allow",
                      "Action": [
                        "logs:CreateLogGroup",
                        "logs:CreateLogStream",
                        "logs:PutLogEvents"
                      ],
                      "Resource": "*"
                    }
                  ]
                }
              }
            ]
          }
        },
        "RDSServiceRole": {
          "Type": "AWS::IAM::Role",
          "Properties": {
            "AssumeRolePolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Principal": {
                    "Service": "appsync.amazonaws.com"
                  },
                  "Action": "sts:AssumeRole"
                }
              ]
            },
            "Policies": [
              {
                "PolicyName": "RDSDataAccess",
                "PolicyDocument": {
                  "Version": "2012-10-17",
                  "Statement": [
                    {
                      "Effect": "Allow",
                      "Action": [
                        "rds-data:*"
                      ],
                      "Resource": [
                        "arn:aws:rds:us-east-2:*:cluster:hazel-mapping-live"
                      ]
                    },
                    {
                      "Effect": "Allow",
                      "Action": [
                        "secretsmanager:GetSecretValue",
                        "kms:Decrypt",
                        "kms:DescribeKey"
                      ],
                      "Resource": [
                        "arn:aws:secretsmanager:us-east-2:794611117044:secret:rds!cluster-5975818b-f15c-4381-b0ba-1f281f97610d-GlpEdy",
                        "arn:aws:kms:us-east-2:*:key/*"
                      ]
                    },
                    {
                      "Effect": "Allow",
                      "Action": [
                        "logs:CreateLogGroup",
                        "logs:CreateLogStream",
                        "logs:PutLogEvents"
                      ],
                      "Resource": [
                        "arn:aws:logs:us-east-2:*:log-group:/aws/appsync/*"
                      ]
                    }
                  ]
                }
              }
            ]
          }
        }
      },
      "Outputs": {}
    },
    "configValidationMode": "warn",
    "serviceFilename": "serverless.yml",
    "initialServerlessConfig": {
      "service": "vue-appsync-api",
      "provider": {
        "$ref": "$[\"service\"][\"provider\"]"
      },
      "custom": {
        "$ref": "$[\"service\"][\"custom\"]"
      },
      "plugins": {
        "$ref": "$[\"service\"][\"plugins\"]"
      },
      "resources": {
        "$ref": "$[\"service\"][\"resources\"]"
      }
    },
    "layers": {},
    "isDashboardMonitoringPreconfigured": false
  },
  "package": {
    "artifactDirectoryName": "serverless/vue-appsync-api/live/1759256576385-2025-09-30T18:22:56.385Z",
    "artifact": ""
  }
}